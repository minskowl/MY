#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}Entity" )
#set( $dao = "${tableschema.Alias}DAO" )
/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using ${namespace}.DAO;
using ApplicationCore;

namespace ${namespace} {    

	/// <summary>
	/// An object representation of the $databaseschema.Name $table table
	/// </summary>
	[Serializable]
	[CLSCompliant(false)]
	public class ${entity} : ${entity}Base, IValidate
	{
	      private I${dao}<${entity}> _dao;

        /// <summary>
        /// Initializes a new instance of the <see cref="T:${entity}"/> class.
        /// </summary>
        public ${entity}()
        {
            _dao = new ${dao}<${entity}>();
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="T:${entity}"/> class. Used only in tests.
        /// </summary>
        /// <param name="dao">The DAO.</param>
        public ${entity}(I${dao}<${entity}> dao)
        {
            _dao = dao;
        }
        
        
        /// <summary>
        /// Gets the Entityt by ID.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        public static ${entity} GetById(int id)
        {
            return new ${dao}<${entity}>().SelectById(id);
        }

        /// <summary>
        /// Creates this instance.
        /// </summary>
        public void Create()
        {
            _dao.Insert(this);
        }

        /// <summary>
        /// Updates this instance.
        /// </summary>
        public void Update()
        {
            _dao.Update(this);
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public void Delete()
        {
            _dao.DeleteById(${table}Id);
        }

        /// <summary>
        /// Validates this instance.
        /// </summary>
        public void Validate()
        {
            if (${tableschema.GetDefaultValidator})
                throw new ExceptionValidate(SR.Errors.${table}.CommonValidationError);
        }
	}
}
