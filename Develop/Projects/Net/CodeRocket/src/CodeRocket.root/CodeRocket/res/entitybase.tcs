#set( $dao = "${tableschema.Alias}DAO" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}Entity" )
/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using System.Xml.Serialization;

namespace ${namespace} {    

	/// <summary>
	/// An object representation of the $databaseschema.Name $table table
	/// </summary>
	[Serializable]
	public abstract class ${entity}Base :  ${namespace}.DAO.I${entity}{
	
#foreach($column in $tableschema.SortedColumns.Values)
#if ($column.IsActive)
#if ($column.AllowNulls)
   	 private ${column.NetType}? $column.MemberName = null;
#else
#if ($column.NetType=="System.Int32" && $column.DefaultValue=="0")
     private $column.NetType $column.MemberName;
#else
		 private $column.NetType $column.MemberName = $column.DefaultValue;
#end 
#end
#end
#end

#foreach($column in $tableschema.SortedColumns.Values)
#if ($column.IsActive)
#if ($column.AllowNulls)
     #set( $nullable = "?" ) 
#else
     #set( $nullable = "" ) 
#end
    /// <summary>
    /// Gets or sets the ${column.MemberName}.
    /// </summary>
    /// <value>The ${column.MemberName}.</value>
		[XmlElement(ElementName = "${column.Alias}")]
		public ${column.NetType}${nullable} $column.Alias 
		{
			get {	return this.${column.MemberName};	}
			set {	this.${column.MemberName} = value;}
		}			

#end
#end        
		/// <summary>
		/// Returns a string representation of the object, displaying all property and field names and values.
		/// </summary>
		public override string ToString() {
			return StringUtil.ToString(this);
		}
		
	}
}
