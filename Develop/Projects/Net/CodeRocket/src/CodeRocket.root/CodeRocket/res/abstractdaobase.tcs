#macro( TypePreFix $type ) 
 #if($type=="SmallDateTime")
 	#set( $out = "dt" ) 
 #elseif($type=="Int")
 	#set( $out = "n" ) 
 #elseif($type=="NVarChar")
  #set( $out = "c" ) 
 #else
  #set( $out = $type )  
 #end  
#end 
#macro( PrintParam $column)
 #TypePreFix($column.dataType)
//				System.Data.IDbDataParameter par${column.Alias} = cmd.CreateParameter();
//				par${column.Alias}.ParameterName = "@i_${out}${column.Name}";
 #if ($column.AllowNulls)
//     par${column.Alias}.Value = (entity.${column.Name}==null) ? System.DBNull.Value : entity.${template.GetParameterValue($databaseschema, $column)};
 #else
//     par${column.Alias}.Value = entity.${template.GetParameterValue($databaseschema, $column)};
 #end			
 #if ($databaseschema.DatabaseProviderType == $mysqlprovidertype)
//				((MySql.Data.MySqlClient.MySqlParameter)par${column.Alias}).MySqlDbType = MySql.Data.MySqlClient.MySqlDbType.${column.GetMySqlDbTypeName()};
 #end
//				cmdParams.Add(par${column.Alias});
//
#end
#set( $dao = "${tableschema.Alias}DAO" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}Entity" )
#if($tableschema.PrimaryKeyCount > 0)
	#set( $pk = $tableschema.GetPrimaryKey(0))
#end

/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using System.Collections;
using System.Data;
    
namespace ${namespace}.DAO {

	/// <summary>
	/// Base Data Access Object for the $table table.
	/// </summary>
	public abstract class ${dao}Base<TEntity> : AbstractDAO 
	where TEntity: I${entity}
	{
        #region Table Shema 
#foreach($column in $tableschema.SortedColumns.Values)
#if ($column.IsActive)
		/// <summary>
		/// A static representation of column $column.Name
		/// </summary>
		public const string Column_${column.Alias.ToUpper()} = "${column.Name}";
#end
#end
#if($tableschema.PrimaryKeyCount > 0)
		/// <summary>
		/// Provides access to the name of the primary key column (${tableschema.GetPrimaryKey(0).Name})
		/// </summary>
		public const string TABLE_PRIMARYKEY = "${tableschema.GetPrimaryKey(0).Name}";
#end

		/// <summary>
		/// Provides access to the name of the table
		/// </summary>
		public const string TABLE_NAME = "${tableschema.Name}";

		#endregion
		
		/// <summary>
		/// Constructor
		/// </summary>
	    public ${dao}Base() : base("$tableschema.Name") { }
        
       /// <summary>
       /// Creates the object of Entity.
       /// </summary>
       /// <returns></returns>
       protected override Object CreateObject()
       {
           return Activator.CreateInstance(typeof(TEntity));
       }        
       
	    /// <summary>
	    /// Maps the IDataReader values to a $entity object
	    /// </summary>
        /// <param name="obj">Entity for mapping</param>	    
	    /// <param name="r">The IDataReader to map</param>
	    /// <returns>${entity}</returns>
	    protected override void MapObject(Object obj, IDataReader r) 
	    {
                I${entity} entity = (I${entity})obj;
	            int ordinal =0;
	#foreach($column in $tableschema.SortedColumns.Values)
#if ($column.IsActive)	

					ordinal = r.GetOrdinal("${column.Name}");
   #if ($column.AllowNulls)
     entity.${column.Alias} = (!r.IsDBNull(ordinal))?((${column.NetType}?)(r.GetValue(ordinal))): null;
   #else
     if(!r.IsDBNull(ordinal)) entity.${column.Alias} =((${column.NetType})(r.GetValue(ordinal)));
   #end					
#end
	#end	
	        }
 
    }
    
}
