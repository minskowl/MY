#set( $method=$node.Tag)
#set( $methodName=$node.Text)
#set( $name =$methodName.substring(6))
#set( $interfaceName=$node.Parent.Text)
#set( $callParams="")
#foreach( $param in $method.GetParameters() )
  #if( $tools.couldGetRandomValue($param.ParameterType)  )
    	const ${param.ParameterType.Name} ${name}${param.Name} = ${tools.getRandomValue($param.ParameterType)};
    	#set( $callParams="${callParams},${name}${param.Name}")
  #else
    	#set( $callParams="${callParams}, new ${param.ParameterType}()")
  #end
#end

public static Tbl${name}Entity Create()
{
			return DB.puser.${interfaceName}.${methodName}(${callParams.substring(1)});
}

[Test]
public void CreateAndDelete()
{
			DB.checkDaoIsClear(dao);

			DateTime n = DateTime.Now;
			
			Tbl${name}Entity ent=Create();
			
			Assert.IsNotNull(ent,"Created entitty is null");

			DB.checkDaoHasOneRecord(dao);
			Tbl${name}Entity readEnt= (Tbl${name}Entity)dao.SelectById(ent.${name}ID );
			
			Assert.IsNotNull(readEnt,"Entity not readed");
			
			// compare properties
			
#foreach( $param in $method.GetParameters() )
  #if( $tools.couldGetRandomValue($param.ParameterType)  )
  		Assert.IsTrue(readEnt.${param.Name}== ${name}${param.Name} ,"Incorrect ${param.Name}");
  #end
#end			

			DB.checkCreatedObject(readEnt,n);
			
			// Delete
			
			//Assert.IsTrue(DB.puser.${interfaceName}.${name}Delete(ent.${name}ID),"${name} not Deleted");
			dao.Delete(ent.${name}ID);
			DB.checkDaoIsClear(dao);

			Assert.IsNull(dao.SelectById(ent.${name}ID),"Entity exists");
}
