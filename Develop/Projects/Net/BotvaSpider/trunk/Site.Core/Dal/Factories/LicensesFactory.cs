

/******************************************
* Auto-generated by CodeRocket
* 08.11.2009 21:32:07
******************************************/
using System.Collections.Generic;
using System.Data;
using Site.Core;
using Savchin.Data.Common;
using Site.Dal.Entities;

namespace Site.Dal.Factories
{

    /// <summary>
    /// License Factory class
    ///
    //</summary>
    public partial class LicenseFactory : FactoryEntityBase<LicenseValue>
    {

        int ordinalCount;
        int ordinalCreationDate;
        int ordinalLicenseID;
        int ordinalProductID;
        int ordinalPublicKey;
        int ordinalUserID;
        int ordinalVersion;
        int ordinalWmTransferID;


        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalCount = reader.GetOrdinal("Count");
            ordinalCreationDate = reader.GetOrdinal("CreationDate");
            ordinalLicenseID = reader.GetOrdinal("LicenseID");
            ordinalProductID = reader.GetOrdinal("ProductID");
            ordinalPublicKey = reader.GetOrdinal("PublicKey");
            ordinalUserID = reader.GetOrdinal("UserID");
            ordinalVersion = reader.GetOrdinal("Version");
            ordinalWmTransferID = reader.GetOrdinal("WmTransferID");
        }
        /// <summary>
        /// Maps the IDataReader values to a License object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override LicenseValue MapObject(IDataReader reader)
        {
            LicenseValue result = new LicenseValue();
            result.Count = reader.GetInt32(ordinalCount);
            result.CreationDate = reader.GetDateTime(ordinalCreationDate);
            result.LicenseID = reader.GetInt32(ordinalLicenseID);
            result.ProductID = reader.GetInt32(ordinalProductID);
            result.PublicKey = reader.GetGuid(ordinalPublicKey);
            result.UserID = reader.GetInt32(ordinalUserID);
            result.Version = reader.GetString(ordinalVersion);
            result.WmTransferID = reader.GetInt32(ordinalWmTransferID);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(LicenseValue value)
        {
            IDbCommand command = database.CreateSPCommand("License_Insert");
            command.AddInputParameter("@Count", DbType.Int32, value.Count);
            command.AddInputParameter("@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter("@LicenseID", DbType.Int32, value.LicenseID);
            command.AddInputParameter("@ProductID", DbType.Int32, value.ProductID);
            command.AddInputParameter("@PublicKey", DbType.Guid, value.PublicKey);
            command.AddInputParameter("@UserID", DbType.Int32, value.UserID);
            command.AddInputParameter("@Version", DbType.String, value.Version);
            command.AddInputParameter("@WmTransferID", DbType.Int32, value.WmTransferID);
            database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Updates the specified License.
        /// </summary>
        /// <param name="value">The License value.</param>
        public void Update(LicenseValue value)
        {
            IDbCommand command = database.CreateSPCommand("License_Update");
            command.AddInputParameter("@Count", DbType.Int32, value.Count);
            command.AddInputParameter("@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter("@LicenseID", DbType.Int32, value.LicenseID);
            command.AddInputParameter("@ProductID", DbType.Int32, value.ProductID);
            command.AddInputParameter("@PublicKey", DbType.Guid, value.PublicKey);
            command.AddInputParameter("@UserID", DbType.Int32, value.UserID);
            command.AddInputParameter("@Version", DbType.String, value.Version);
            command.AddInputParameter("@WmTransferID", DbType.Int32, value.WmTransferID);
            database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets License by ID.
        /// </summary>
        /// <param name="LicenseID">The LicenseID.</param>
        /// <returns></returns>
        public LicenseValue SelectByID(System.Int32 LicenseID)
        {
            IDbCommand command = database.CreateSPCommand("License_GetByID");
            command.AddInputParameter("@LicenseID", DbType.Int32, LicenseID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified License.
        /// </summary>
        /// <param name="LicenseID">The LicenseID.</param>
        public void Delete(System.Int32 LicenseID)
        {
            IDbCommand command = database.CreateSPCommand("License_Delete");
            command.AddInputParameter("@LicenseID", DbType.Int32, LicenseID);
            database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified License.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(LicenseValue value)
        {
            IDbCommand command = database.CreateSPCommand("License_Delete");
            command.AddInputParameter("@LicenseID", DbType.Int32, value.LicenseID);
            database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Selects all License values.
        /// </summary>
        /// <returns>List of all License</returns>
        public IList<LicenseValue> SelectAll()
        {
            return Select(database.CreateSPCommand("License_GetAll"));
        }


        /// <summary>
        /// Selects License values ProductID .
        /// ForeignKey: FK_Licenses_Peoducts
        /// </summary>
        /// <param name="ProductID">The ProductID.</param>
        /// <returns>List of License</returns>   
        public IList<LicenseValue> SelectByProductID(System.Int32 ProductID)
        {
            IDbCommand command = database.CreateSPCommand("License_GetByProductID");
            command.AddInputParameter("@ProductID", DbType.Int32, ProductID);
            return Select(command);
        }

        /// <summary>
        /// Selects License values UserID .
        /// ForeignKey: FK_Licenses_Users
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        /// <returns>List of License</returns>   
        public IList<LicenseValue> SelectByUserID(System.Int32 UserID)
        {
            IDbCommand command = database.CreateSPCommand("License_GetByUserID");
            command.AddInputParameter("@UserID", DbType.Int32, UserID);
            return Select(command);
        }

        /// <summary>
        /// Selects License values WmTransferID .
        /// ForeignKey: FK_Licenses_WM.Transfers
        /// </summary>
        /// <param name="WmTransferID">The WmTransferID.</param>
        /// <returns>List of License</returns>   
        public IList<LicenseValue> SelectByWmTransferID(System.Int32 WmTransferID)
        {
            IDbCommand command = database.CreateSPCommand("License_GetByWmTransferID");
            command.AddInputParameter("@WmTransferID", DbType.Int32, WmTransferID);
            return Select(command);
        }
    }
}