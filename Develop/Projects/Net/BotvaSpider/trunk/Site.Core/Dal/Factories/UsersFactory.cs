

/******************************************
* Auto-generated by CodeRocket
* 08.11.2009 10:08:00
******************************************/
using System.Collections.Generic;
using System.Data;
using Site.Core;
using Savchin.Data.Common;
using Site.Dal.Entities;

namespace Site.Dal.Factories
{

    /// <summary>
    /// User Factory class
    ///
    //</summary>
    public partial class UserFactory : FactoryEntityBase<UserValue>
    {

        int ordinalCreationDate;
        int ordinalEmail;
        int ordinalFirstName;
        int ordinalIsAdmin;
        int ordinalLastName;
        int ordinalLogin;
        int ordinalPassword;
        int ordinalSecurityAnswer;
        int ordinalSecurityQuestion;
        int ordinalUserID;


        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalCreationDate = reader.GetOrdinal("CreationDate");
            ordinalEmail = reader.GetOrdinal("Email");
            ordinalFirstName = reader.GetOrdinal("FirstName");
            ordinalIsAdmin = reader.GetOrdinal("IsAdmin");
            ordinalLastName = reader.GetOrdinal("LastName");
            ordinalLogin = reader.GetOrdinal("Login");
            ordinalPassword = reader.GetOrdinal("Password");
            ordinalSecurityAnswer = reader.GetOrdinal("SecurityAnswer");
            ordinalSecurityQuestion = reader.GetOrdinal("SecurityQuestion");
            ordinalUserID = reader.GetOrdinal("UserID");
        }
        /// <summary>
        /// Maps the IDataReader values to a User object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override UserValue MapObject(IDataReader reader)
        {
            UserValue result = new UserValue();
            result.CreationDate = reader.GetDateTime(ordinalCreationDate);
            result.Email = reader.GetString(ordinalEmail);
            result.FirstName = reader.GetString(ordinalFirstName);
            result.IsAdmin = reader.GetBoolean(ordinalIsAdmin);
            result.LastName = reader.GetString(ordinalLastName);
            result.Login = reader.GetString(ordinalLogin);
            result.Password = reader.GetString(ordinalPassword);
            result.SecurityAnswer = reader.GetString(ordinalSecurityAnswer);
            result.SecurityQuestion = reader.GetString(ordinalSecurityQuestion);
            result.UserID = reader.GetInt32(ordinalUserID);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(UserValue value)
        {
            IDbCommand command = database.CreateSPCommand("User_Insert");
            command.AddInputParameter("@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter("@Email", DbType.String, value.Email);
            command.AddInputParameter("@FirstName", DbType.String, value.FirstName);
            command.AddInputParameter("@IsAdmin", DbType.Boolean, value.IsAdmin);
            command.AddInputParameter("@LastName", DbType.String, value.LastName);
            command.AddInputParameter("@Login", DbType.String, value.Login);
            command.AddInputParameter("@Password", DbType.String, value.Password);
            command.AddInputParameter("@SecurityAnswer", DbType.String, value.SecurityAnswer);
            command.AddInputParameter("@SecurityQuestion", DbType.String, value.SecurityQuestion);
            IDbDataParameter UserIDParameter = command.AddParameter( "@UserID", DbType.Int32, null, ParameterDirection.Output);
            database.ExecuteNonQuery(command);

            value.UserID = (System.Int32)UserIDParameter.Value;
        }

        /// <summary>
        /// Updates the specified User.
        /// </summary>
        /// <param name="value">The User value.</param>
        public void Update(UserValue value)
        {
            IDbCommand command = database.CreateSPCommand("User_Update");
            command.AddInputParameter("@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter("@Email", DbType.String, value.Email);
            command.AddInputParameter("@FirstName", DbType.String, value.FirstName);
            command.AddInputParameter("@IsAdmin", DbType.Boolean, value.IsAdmin);
            command.AddInputParameter("@LastName", DbType.String, value.LastName);
            command.AddInputParameter("@Login", DbType.String, value.Login);
            command.AddInputParameter("@Password", DbType.String, value.Password);
            command.AddInputParameter("@SecurityAnswer", DbType.String, value.SecurityAnswer);
            command.AddInputParameter("@SecurityQuestion", DbType.String, value.SecurityQuestion);
            command.AddInputParameter("@UserID", DbType.Int32, value.UserID);
            database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets User by ID.
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        /// <returns></returns>
        public UserValue SelectByID(System.Int32 UserID)
        {
            IDbCommand command = database.CreateSPCommand("User_GetByID");
            command.AddInputParameter("@UserID", DbType.Int32, UserID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified User.
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        public void Delete(System.Int32 UserID)
        {
            IDbCommand command = database.CreateSPCommand("User_Delete");
            command.AddInputParameter("@UserID", DbType.Int32, UserID);
            database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified User.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(UserValue value)
        {
            IDbCommand command = database.CreateSPCommand("User_Delete");
            command.AddInputParameter("@UserID", DbType.Int32, value.UserID);
            database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Selects all User values.
        /// </summary>
        /// <returns>List of all User</returns>
        public IList<UserValue> SelectAll()
        {
            return Select(database.CreateSPCommand("User_GetAll"));
        }

    }
}