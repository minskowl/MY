

/******************************************
* Auto-generated by CodeRocket
* 08.11.2009 21:32:07
******************************************/
using System;
using System.Collections.Generic;
using System.Data;
using Savchin.Data.Common;
using Site.Bl.Entities;
using Site.Core;
using Site.Dal.Entities;
using Site.Dal.Factories;

namespace Site.Bl
{

    /// <summary>
    /// License Manager class
    ///
    //</summary>
    public class LicenseManager : ManagerBase<LicenseFactory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagerBase&lt;T&gt;"/> class.
        /// </summary>
        public LicenseManager()
            : base()
        {

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagerBase&lt;TFactory&gt;"/> class.
        /// </summary>
        /// <param name="connection">The connection.</param>
        public LicenseManager(DBConnection connection)
            : base(connection)
        {

        }


        #region Getters
        /// <summary>
        /// Get all.
        /// </summary>
        /// <returns></returns> 
        public IList<License> GetAll()
        {
            return Wrap(factory.SelectAll());
        }
        /// <summary>
        /// Ges the License by ID.
        /// </summary>
        /// <param name="LicenseID">The LicenseID.</param>
        /// <returns></returns>        
        public License GetByID(System.Int32 LicenseID)
        {
            return Wrap(factory.SelectByID(LicenseID));
        }

        /// <summary>
        /// Gets the info by user ID.
        /// </summary>
        /// <param name="UserID">The user ID.</param>
        /// <returns></returns>
        public DataTable GetInfoByUserID(int UserID)
        {
            return factory.GetInfoByUserID(UserID);
        }

        /// <summary>
        /// Get License values ProductID .
        /// </summary>
        /// <param name="ProductID">The ProductID.</param>
        /// <returns>List of License</returns>   
        public IList<License> GetByProductID(System.Int32 ProductID)
        {
            return Wrap(factory.SelectByProductID(ProductID));
        }

        /// <summary>
        /// Get License values UserID .
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        /// <returns>List of License</returns>   
        public IList<License> GetByUserID(System.Int32 UserID)
        {
            return Wrap(factory.SelectByUserID(UserID));
        }

        /// <summary>
        /// Get License values WmTransferID .
        /// </summary>
        /// <param name="WmTransferID">The WmTransferID.</param>
        /// <returns>List of License</returns>   
        public IList<License> GetByWmTransferID(System.Int32 WmTransferID)
        {
            return Wrap(factory.SelectByWmTransferID(WmTransferID));
        } 
        #endregion

        /// <summary>
        /// Creates the specified transfer.
        /// </summary>
        /// <param name="transfer">The transfer.</param>
        public void Create(Transfer  transfer)
        {
            var license = new License();

            license.CreationDate = DateTime.Now;
            //TODO: Determine count licenses
            license.Count = 1;
            license.PublicKey = Guid.NewGuid();
            license.WmTransferID = transfer.ID;
            license.UserID = SiteContext.Current.CurrenUserID.Value;
            //TODO: Current version 
            license.Version = new Version(1, 0).ToString();

            Save(license);
        }
        /// <summary>
        /// Saves the specified License.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Save(License entity)
        {
            entity.Validate();
            if (Identifier.IsValid(entity.LicenseID))
            {
                factory.Update(entity.ObjectValue);
            }
            else
            {
                factory.Insert(entity.ObjectValue);
            }
        }


        /// <summary>
        /// Deletes the specified License.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Delete(License entity)
        {
            factory.Delete(entity.ObjectValue);
        }

        /// <summary>
        /// Wraps the specified values.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        private IList<License> Wrap(ICollection<LicenseValue> values)
        {
            List<License> result = new List<License>(values.Count);
            foreach (LicenseValue value in values)
            {
                result.Add(new License(value));
            }
            return result;
        }

        /// <summary>
        /// Wraps the specified value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private License Wrap(LicenseValue value)
        {
            return (value == null) ? null : new License(value);
        }


    }
}