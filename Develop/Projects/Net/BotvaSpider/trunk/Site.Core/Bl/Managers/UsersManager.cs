

/******************************************
* Auto-generated by CodeRocket
* 08.11.2009 10:08:00
******************************************/
using System;
using System.Collections.Generic;
using Savchin.Data.Common;
using Site.Core;
using Site.Dal.Entities;
using Site.Dal.Factories;

namespace Site.Bl
{

    /// <summary>
    /// User Manager class
    ///
    //</summary>
    public class UserManager : ManagerBase<UserFactory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagerBase&lt;T&gt;"/> class.
        /// </summary>
        public UserManager()
            : base()
        {

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagerBase&lt;TFactory&gt;"/> class.
        /// </summary>
        /// <param name="connection">The connection.</param>
        public UserManager(DBConnection connection)
            : base(connection)
        {

        }


        #region Getters
        /// <summary>
        /// Get all.
        /// </summary>
        /// <returns></returns> 
        public IList<User> GetAll()
        {
            return Wrap(factory.SelectAll());
        }
        /// <summary>
        /// Ges the User by ID.
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        /// <returns></returns>        
        public User GetByID(System.Int32 UserID)
        {
            return Wrap(factory.SelectByID(UserID));
        }

        /// <summary>
        /// Gets the by login.
        /// </summary>
        /// <param name="Login">The login.</param>
        /// <returns></returns>
        public User GetByLogin(string Login)
        {
            return Wrap(factory.GetByLogin(Login));
        } 
        #endregion
        public bool CanLogin(string login, string password)
        {
            return factory.GetByLoginByPassword(login, password) != null;
        }

        /// <summary>
        /// Saves the specified User.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Save(User entity)
        {
            entity.Validate();
            if (Identifier.IsValid(entity.UserID))
            {
                factory.Update(entity.ObjectValue);
            }
            else
            {
                entity.CreationDate = DateTime.Now;
                factory.Insert(entity.ObjectValue);
            }
        }


        /// <summary>
        /// Deletes the specified User.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Delete(User entity)
        {
            factory.Delete(entity.ObjectValue);
        }

        /// <summary>
        /// Wraps the specified values.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        private IList<User> Wrap(ICollection<UserValue> values)
        {
            List<User> result = new List<User>(values.Count);
            foreach (UserValue value in values)
            {
                result.Add(new User(value));
            }
            return result;
        }

        /// <summary>
        /// Wraps the specified value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private User Wrap(UserValue value)
        {
            return (value == null) ? null : new User(value);
        }
    }
}