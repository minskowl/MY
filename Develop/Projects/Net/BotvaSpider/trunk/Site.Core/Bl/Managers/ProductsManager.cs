

/******************************************
* Auto-generated by CodeRocket
* 08.11.2009 9:14:29
******************************************/
using System.Collections.Generic;
using Savchin.Data.Common;
using Site.Core;
using Site.Dal.Entities;
using Site.Dal.Factories;

namespace Site.Bl
{

	/// <summary>
	/// Product Manager class
	///
	//</summary>
	public class ProductManager : ManagerBase< ProductFactory>
	{
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagerBase&lt;T&gt;"/> class.
        /// </summary>
        public ProductManager()
            : base()
        {

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagerBase&lt;TFactory&gt;"/> class.
        /// </summary>
        /// <param name="connection">The connection.</param>
        public ProductManager(DBConnection connection)
            : base(connection)
        {

        }
        
          
                /// <summary>
        /// Get all.
        /// </summary>
        /// <returns></returns> 
        public IList<Product> GetAll()
        {
            return Wrap(factory.SelectAll());
        }
			/// <summary>
			/// Ges the Product by ID.
			/// </summary>
				/// <param name="ProductID">The ProductID.</param>
				/// <returns></returns>        
			public Product GetByID(System.Int32 ProductID)
			{
				return Wrap(factory.SelectByID(ProductID));
			}           
  

	  
      
              /// <summary>
        /// Saves the specified Product.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Save(Product entity)
        {
            entity.Validate();
            if (Identifier.IsValid(entity.ProductID))
            {
                factory.Update(entity.ObjectValue);
            }
            else
            {
                factory.Insert(entity.ObjectValue);
            }
        }

    
        /// <summary>
        /// Deletes the specified Product.
        /// </summary>
        /// <param name="entity">The entity.</param>
		public void Delete(Product entity)
        {
			factory.Delete(entity.ObjectValue);
        }  
       
        /// <summary>
        /// Wraps the specified values.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        private IList<Product> Wrap(ICollection<ProductValue> values)
        {
           List<Product> result= new List<Product>(values.Count);
            foreach (ProductValue value in values)
            {
                result.Add(new Product(value));
            }
            return result;
        }
        
        /// <summary>
        /// Wraps the specified value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private Product Wrap(ProductValue value)
        {
            return (value == null) ? null : new Product(value);
        }
    }
}