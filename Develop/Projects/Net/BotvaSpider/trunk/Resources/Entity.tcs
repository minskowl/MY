#set( $entity="${tools.getSingularName($table.Alias)}")
#set( $dao = "${entity}Dao" )
#set( $baseInteface = "I${entity}ForDao" )
#set( $identifier = "${entity}Identifier" )

#set($pkCallingArgumets="")
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($pkCallingArgumets="${pkCallingArgumets} ${column.MemberName},")			
#end
#end  
#set($pkCallingArgumets="${tools.CutString($pkCallingArgumets,1)}")

/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using System.Xml.Serialization;
using Savchin.Validation;
using ${namespace}.Core;
using ${namespace}.Dal.Entities;


namespace ${namespace}.Bl.Entities 
{    
    
	/// <summary>
	/// Base ${entity}
	/// </summary>
	[Serializable]
	public class ${entity} : EntityBase<${entity}Value>
{

     	
	
	 #region Properties

        
#foreach($column in $table.SortedColumns.Values)
#if ($column.IsActive)
   #if ($column.AllowNulls && $column.NetType!="String" )
     #set( $nullable = "?" ) 
   #else
     #set( $nullable = "" ) 
   #end
        /// <summary>
        /// Gets or sets the ${column.Alias}.
        /// </summary>
        /// <value>The ${column.Alias}.</value>   
		[XmlAttribute]
  #if (!$column.AllowNulls && $column.NetType=="System.String")
      [RequiredFieldValidation()]
  #end
		public ${column.NetType}${nullable} $column.Alias 
		{
			get{return objectValue.${column.ProperName};}
			set{objectValue.${column.ProperName} = value;}
		}			

#end
#end
        
        #endregion
        
        /// <summary>
        /// Initializes a new instance of the <see cref="${entity}"/> class.
        /// </summary>
        public ${entity}() : base()
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="${entity}"/> class.
        /// </summary>
        /// <param name="value">The value.</param>
        internal ${entity}(${entity}Value value) : base(value)
        {
        }       
          
        
        /// <summary>
        /// Copies the specified destination.
        /// </summary>
        /// <param name="destination">The destination.</param>
//        protected override void Copy(object destination)
//        {
//            ${entity}Base<TPool> dest = destination as ${entity}Base<TPool>;
            
#foreach($column in $table.SortedColumns.Values)
#if ($column.IsActive)
 //           dest._${column.Alias} = _${column.Alias};
#end
#end      
            
 //            base.Copy(destination);
 //       }	
        
        

        
        
 
 
	}
}
