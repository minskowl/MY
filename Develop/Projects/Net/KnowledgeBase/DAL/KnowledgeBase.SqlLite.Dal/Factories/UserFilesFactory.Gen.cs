/******************************************
* Auto-generated by CodeRocket
* 5/17/2010 11:42:48 AM
******************************************/
using System;
using System.Collections.Generic;
using System.Data;

using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.SqlLite.Dal.Factories
{

    /// <summary>
    /// UserFile Factory class
    ///</summary>
    public partial class UserFileFactory : DbFactoryBase<UserFileValue>
    {
        private const string SelectQuery = "SELECT [FileName],[Size],[UserFileID] FROM [UserFiles]";
        private int _ordinalFileName;
        private int _ordinalSize;
        private int _ordinalUserFileID;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFileFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public UserFileFactory(DalContext context)
            : base(context)
        {

        }
        /// <summary>
        /// Inits the ordinals.
        /// </summary>
        /// <param name="reader">The reader.</param>		    
        protected override void InitOrdinals(IDataReader reader)
        {
            _ordinalFileName = reader.GetOrdinal("FileName");
            _ordinalSize = reader.GetOrdinal("Size");
            _ordinalUserFileID = reader.GetOrdinal("UserFileID");
        }

        /// <summary>
        /// Maps the IDataReader values to a UserFile object
        ///</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override UserFileValue MapObject(IDataReader reader)
        {
            var result = new UserFileValue();
            result.FileName = reader.GetString(_ordinalFileName);
            result.Size = reader.GetInt32(_ordinalSize);
            result.UserFileID = reader.GetInt32(_ordinalUserFileID);
            return result;
        }





        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(UserFileValue value)
        {
            var command = Database.CreateSqlCommand(@"
INSERT INTO [UserFiles] ([FileName],[Size])
VALUES (@FileName,@Size);
SELECT last_insert_rowid();
			");
            command.AddInputParameter("@FileName", DbType.String, value.FileName);
            command.AddInputParameter("@Size", DbType.Int32, value.Size);
            value.UserFileID = (System.Int32)(long)Database.ExecuteScalar(command);

        }




        /// <summary>
        /// Updates the specified UserFile.
        /// </summary>
        /// <param name="value">The UserFile value.</param>
        public void Update(UserFileValue value)
        {
            var command = Database.CreateSqlCommand(@"
		UPDATE [UserFiles]
		SET [FileName]=@FileName,[Size]=@Size
		WHERE  [UserFileID]=@UserFileID ;");
            command.AddInputParameter("@FileName", DbType.String, value.FileName);
            command.AddInputParameter("@Size", DbType.Int32, value.Size);
            command.AddInputParameter("@UserFileID", DbType.Int32, value.UserFileID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets UserFile by ID.
        /// </summary>
        /// <param name="UserFileID">The UserFileID.</param>
        /// <returns></returns>
        public UserFileValue SelectByID(System.Int32 UserFileID)
        {
            var command = Database.CreateSqlCommand(SelectQuery + "	WHERE  [UserFileID]=@UserFileID ");
            command.AddInputParameter("@UserFileID", DbType.Int32, UserFileID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified UserFile.
        /// </summary>
        /// <param name="UserFileID">The UserFileID.</param>
        public void Delete(System.Int32 UserFileID)
        {
            var command = Database.CreateSqlCommand(@"
		DELETE FROM [UserFiles]
		 WHERE  [UserFileID]=@UserFileID ;");
            command.AddInputParameter("@UserFileID", DbType.Int32, UserFileID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified UserFile.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(UserFileValue value)
        {
            Delete(value.UserFileID);
        }
        /// <summary>
        /// Selects all UserFile values.
        /// </summary>
        /// <returns>List of all UserFile</returns>
        public IList<UserFileValue> SelectAll()
        {
            return Select(Database.CreateSqlCommand(SelectQuery));
        }


    }
}