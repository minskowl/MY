/******************************************
* Auto-generated by CodeRocket
* 5/17/2010 1:34:28 PM
******************************************/
using System;
using System.Collections.Generic;
using System.Data;

using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.SqlLite.Dal.Factories
{

    /// <summary>
    /// FileInclude Factory class
    ///</summary>
    public partial class FileIncludeFactory : DbFactoryBase<FileIncludeValue>
    {
        private const string SelectQuery = "SELECT [FileIncludeID],[FileName],[KnowledgeID],[Size] FROM [FileIncludes]";
        private int _ordinalFileIncludeID;
        private int _ordinalFileName;
        private int _ordinalKnowledgeID;
        private int _ordinalSize;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileIncludeFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public FileIncludeFactory(DalContext context)
            : base(context)
        {

        }

        /// <summary>
        /// Inits the ordinals.
        /// </summary>
        /// <param name="reader">The reader.</param>		    
        protected override void InitOrdinals(IDataReader reader)
        {
            _ordinalFileIncludeID = reader.GetOrdinal("FileIncludeID");
            _ordinalFileName = reader.GetOrdinal("FileName");
            _ordinalKnowledgeID = reader.GetOrdinal("KnowledgeID");
            _ordinalSize = reader.GetOrdinal("Size");
        }

        /// <summary>
        /// Maps the IDataReader values to a FileInclude object
        ///</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override FileIncludeValue MapObject(IDataReader reader)
        {
            var result = new FileIncludeValue();
            result.FileIncludeID = reader.GetGuid(_ordinalFileIncludeID);
            result.FileName = reader.GetString(_ordinalFileName);
            result.KnowledgeID = reader.GetInt32(_ordinalKnowledgeID);
            result.Size = reader.GetInt32(_ordinalSize);
            return result;
        }





        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(FileIncludeValue value)
        {
            var command = Database.CreateSqlCommand(@"
INSERT INTO [FileIncludes] ([FileIncludeID],[FileName],[KnowledgeID],[Size])
VALUES (@FileIncludeID,@FileName,@KnowledgeID,@Size);
			");
            command.AddInputParameter("@FileIncludeID", DbType.Guid, value.FileIncludeID);
            command.AddInputParameter("@FileName", DbType.String, value.FileName);
            command.AddInputParameter("@KnowledgeID", DbType.Int32, value.KnowledgeID);
            command.AddInputParameter("@Size", DbType.Int32, value.Size);
            Database.ExecuteNonQuery(command);

        }




        /// <summary>
        /// Updates the specified FileInclude.
        /// </summary>
        /// <param name="value">The FileInclude value.</param>
        public void Update(FileIncludeValue value)
        {
            var command = Database.CreateSqlCommand(@"
		UPDATE [FileIncludes]
		SET [FileIncludeID]=@FileIncludeID,[FileName]=@FileName,[KnowledgeID]=@KnowledgeID,[Size]=@Size
		WHERE  [FileIncludeID]=@FileIncludeID ;");
            command.AddInputParameter("@FileIncludeID", DbType.Guid, value.FileIncludeID);
            command.AddInputParameter("@FileName", DbType.String, value.FileName);
            command.AddInputParameter("@KnowledgeID", DbType.Int32, value.KnowledgeID);
            command.AddInputParameter("@Size", DbType.Int32, value.Size);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets FileInclude by ID.
        /// </summary>
        /// <param name="FileIncludeID">The FileIncludeID.</param>
        /// <returns></returns>
        public FileIncludeValue SelectByID(System.Guid FileIncludeID)
        {
            var command = Database.CreateSqlCommand(SelectQuery + "	WHERE  [FileIncludeID]=@FileIncludeID ");
            command.AddInputParameter("@FileIncludeID", DbType.Guid, FileIncludeID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified FileInclude.
        /// </summary>
        /// <param name="FileIncludeID">The FileIncludeID.</param>
        public void Delete(System.Guid FileIncludeID)
        {
            var command = Database.CreateSqlCommand(@"
		DELETE FROM [FileIncludes]
		 WHERE  [FileIncludeID]=@FileIncludeID ;");
            command.AddInputParameter("@FileIncludeID", DbType.Guid, FileIncludeID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified FileInclude.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(FileIncludeValue value)
        {
            Delete(value.FileIncludeID);
        }
        /// <summary>
        /// Selects all FileInclude values.
        /// </summary>
        /// <returns>List of all FileInclude</returns>
        public IList<FileIncludeValue> SelectAll()
        {
            return Select(Database.CreateSqlCommand(SelectQuery));
        }


        /// <summary>
        /// Selects FileInclude values KnowledgeID .
        /// ForeignKey: FK_Knowledges_FileIncludes
        /// </summary>
        /// <param name="KnowledgeID">The KnowledgeID.</param>
        /// <returns>List of FileInclude</returns>   
        public IList<FileIncludeValue> SelectByKnowledgeID(System.Int32 KnowledgeID)
        {
            var command = Database.CreateSqlCommand(SelectQuery + " WHERE  [KnowledgeID]=@KnowledgeID ;");
            command.AddInputParameter("@KnowledgeID", DbType.Int32, KnowledgeID);
            return Select(command);
        }
    }
}