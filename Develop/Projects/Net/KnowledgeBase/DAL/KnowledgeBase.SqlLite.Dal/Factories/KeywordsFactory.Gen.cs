/******************************************
* Auto-generated by CodeRocket
* 5/14/2010 5:05:18 PM
******************************************/
using System;
using System.Collections.Generic;
using System.Data;

using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.SqlLite.Dal.Factories
{

    /// <summary>
    /// Keyword Factory class
    ///</summary>
    public partial class KeywordFactory : DbFactoryBase<KeywordValue>
    {
        private const string SelectQuery = "SELECT [CreationDate],[KeywordID],[KeywordStatusID],[KeywordTypeID],[Name] FROM [Keywords]";
        private int _ordinalCreationDate;
        private int _ordinalKeywordID;
        private int _ordinalKeywordStatusID;
        private int _ordinalKeywordTypeID;
        private int _ordinalName;


        /// <summary>
        /// Initializes a new instance of the <see cref="KeywordFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public KeywordFactory(DalContext context)
            : base(context)
        {

        }
        /// <summary>
        /// Inits the ordinals.
        /// </summary>
        /// <param name="reader">The reader.</param>		    
        protected override void InitOrdinals(IDataReader reader)
        {
            _ordinalCreationDate = reader.GetOrdinal("CreationDate");
            _ordinalKeywordID = reader.GetOrdinal("KeywordID");
            _ordinalKeywordStatusID = reader.GetOrdinal("KeywordStatusID");
            _ordinalKeywordTypeID = reader.GetOrdinal("KeywordTypeID");
            _ordinalName = reader.GetOrdinal("Name");
        }

        /// <summary>
        /// Maps the IDataReader values to a Keyword object
        ///</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override KeywordValue MapObject(IDataReader reader)
        {
            var result = new KeywordValue();
            result.CreationDate = reader.GetDateTime(_ordinalCreationDate);
            result.KeywordID = reader.GetInt32(_ordinalKeywordID);
            result.KeywordStatusID = reader.GetByte(_ordinalKeywordStatusID);
            result.KeywordTypeID = reader.GetInt16(_ordinalKeywordTypeID);
            result.Name = reader.GetString(_ordinalName);
            return result;
        }





        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(KeywordValue value)
        {
            var command = Database.CreateSqlCommand(@"
INSERT INTO [Keywords] ([KeywordStatusID],[KeywordTypeID],[Name])
VALUES (@KeywordStatusID,@KeywordTypeID,@Name);
SELECT last_insert_rowid();
			");
            command.AddInputParameter("@KeywordStatusID", DbType.Byte, value.KeywordStatusID);
            command.AddInputParameter("@KeywordTypeID", DbType.Int16, value.KeywordTypeID);
            command.AddInputParameter("@Name", DbType.String, value.Name);
            value.KeywordID = (System.Int32)(long)Database.ExecuteScalar(command);

        }




        /// <summary>
        /// Updates the specified Keyword.
        /// </summary>
        /// <param name="value">The Keyword value.</param>
        public void Update(KeywordValue value)
        {
            var command = Database.CreateSqlCommand(@"
		UPDATE [Keywords]
		SET [CreationDate]=@CreationDate,[KeywordStatusID]=@KeywordStatusID,[KeywordTypeID]=@KeywordTypeID,[Name]=@Name
		WHERE  [KeywordID]=@KeywordID ;");
            command.AddInputParameter("@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter("@KeywordID", DbType.Int32, value.KeywordID);
            command.AddInputParameter("@KeywordStatusID", DbType.Byte, value.KeywordStatusID);
            command.AddInputParameter("@KeywordTypeID", DbType.Int16, value.KeywordTypeID);
            command.AddInputParameter("@Name", DbType.String, value.Name);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets Keyword by ID.
        /// </summary>
        /// <param name="KeywordID">The KeywordID.</param>
        /// <returns></returns>
        public KeywordValue SelectByID(System.Int32 KeywordID)
        {
            var command = Database.CreateSqlCommand(SelectQuery + "	WHERE  [KeywordID]=@KeywordID ");
            command.AddInputParameter("@KeywordID", DbType.Int32, KeywordID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified Keyword.
        /// </summary>
        /// <param name="KeywordID">The KeywordID.</param>
        public void Delete(System.Int32 KeywordID)
        {
            var command = Database.CreateSqlCommand(@"
		DELETE FROM [Keywords]
		 WHERE  [KeywordID]=@KeywordID ;");
            command.AddInputParameter("@KeywordID", DbType.Int32, KeywordID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified Keyword.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(KeywordValue value)
        {
            Delete(value.KeywordID);
        }
        /// <summary>
        /// Selects all Keyword values.
        /// </summary>
        /// <returns>List of all Keyword</returns>
        public IList<KeywordValue> SelectAll()
        {
            return Select(Database.CreateSqlCommand(SelectQuery));
        }


        /// <summary>
        /// Selects Keyword values KeywordStatusID .
        /// ForeignKey: FK_Keywords_KeywordStatuses
        /// </summary>
        /// <param name="KeywordStatusID">The KeywordStatusID.</param>
        /// <returns>List of Keyword</returns>   
        public IList<KeywordValue> SelectByKeywordStatusID(System.Byte KeywordStatusID)
        {
            var command = Database.CreateSqlCommand(SelectQuery + " WHERE  [KeywordStatusID]=@KeywordStatusID ;");
            command.AddInputParameter("@KeywordStatusID", DbType.Byte, KeywordStatusID);
            return Select(command);
        }

        /// <summary>
        /// Selects Keyword values KeywordTypeID .
        /// ForeignKey: FK_Keywords_KeywordTypes
        /// </summary>
        /// <param name="KeywordTypeID">The KeywordTypeID.</param>
        /// <returns>List of Keyword</returns>   
        public IList<KeywordValue> SelectByKeywordTypeID(System.Int16 KeywordTypeID)
        {
            var command = Database.CreateSqlCommand(SelectQuery + " WHERE  [KeywordTypeID]=@KeywordTypeID ;");
            command.AddInputParameter("@KeywordTypeID", DbType.Int16, KeywordTypeID);
            return Select(command);
        }
    }
}