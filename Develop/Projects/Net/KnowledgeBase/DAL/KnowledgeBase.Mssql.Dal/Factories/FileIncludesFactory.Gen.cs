

/******************************************
* Auto-generated by CodeRocket
* 28.11.2008 13:31:23
******************************************/
using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// FileInclude Factory class
    ///
    //</summary>
    public partial class FileIncludeFactory : DbFactoryBase<FileIncludeValue>, IFileIncludeFactory
    {

        int ordinalFileIncludeID;
        int ordinalFileName;
        int ordinalKnowledgeID;
        int ordinalSize;


        /// <summary>
        /// Inits the ordinals.
        /// </summary>
        /// <param name="reader">The reader.</param>
        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalFileIncludeID = reader.GetOrdinal("FileIncludeID");
            ordinalFileName = reader.GetOrdinal("FileName");
            ordinalKnowledgeID = reader.GetOrdinal("KnowledgeID");
            ordinalSize = reader.GetOrdinal("Size");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileIncludeFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public FileIncludeFactory(DalContext context)
            : base(context)
        {

        }

        /// <summary>
        /// Maps the IDataReader values to a FileInclude object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override FileIncludeValue MapObject(IDataReader reader)
        {
            FileIncludeValue result = new FileIncludeValue();
            result.FileIncludeID = reader.GetGuid(ordinalFileIncludeID);
            result.FileName = reader.GetString(ordinalFileName);
            result.KnowledgeID = reader.GetInt32(ordinalKnowledgeID);
            result.Size = reader.GetInt32(ordinalSize);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(FileIncludeValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileInclude_Insert");
            command.AddInputParameter( "@FileIncludeID", DbType.Guid, value.FileIncludeID);
            command.AddInputParameter( "@FileName", DbType.String, value.FileName);
            command.AddInputParameter( "@KnowledgeID", DbType.Int32, value.KnowledgeID);
            command.AddInputParameter( "@Size", DbType.Int32, value.Size);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Updates the specified FileInclude.
        /// </summary>
        /// <param name="value">The FileInclude value.</param>
        public void Update(FileIncludeValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileInclude_Update");
            command.AddInputParameter( "@FileIncludeID", DbType.Guid, value.FileIncludeID);
            command.AddInputParameter( "@FileName", DbType.String, value.FileName);
            command.AddInputParameter( "@KnowledgeID", DbType.Int32, value.KnowledgeID);
            command.AddInputParameter( "@Size", DbType.Int32, value.Size);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets FileInclude by ID.
        /// </summary>
        /// <param name="FileIncludeID">The FileIncludeID.</param>
        /// <returns></returns>
        public FileIncludeValue SelectByID(System.Guid FileIncludeID)
        {
            IDbCommand command = Database.CreateSPCommand("FileInclude_GetByID");
            command.AddInputParameter( "@FileIncludeID", DbType.Guid, FileIncludeID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified FileInclude.
        /// </summary>
        /// <param name="FileIncludeID">The FileIncludeID.</param>
        public void Delete(System.Guid FileIncludeID)
        {
            IDbCommand command = Database.CreateSPCommand("FileInclude_Delete");
            command.AddInputParameter( "@FileIncludeID", DbType.Guid, FileIncludeID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified FileInclude.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(FileIncludeValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileInclude_Delete");
            command.AddInputParameter( "@FileIncludeID", DbType.Guid, value.FileIncludeID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Selects all FileInclude values.
        /// </summary>
        /// <returns>List of all FileInclude</returns>
        public IList<FileIncludeValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("FileInclude_GetAll"));
        }


        /// <summary>
        /// Selects FileInclude values KnowledgeID .
        /// ForeignKey: FK_FileIncludes_FileIncludes
        /// </summary>
        /// <param name="KnowledgeID">The KnowledgeID.</param>
        /// <returns>List of FileInclude</returns>   
        public IList<FileIncludeValue> SelectByKnowledgeID(System.Int32 KnowledgeID)
        {
            IDbCommand command = Database.CreateSPCommand("FileInclude_GetByKnowledgeID");
            command.AddInputParameter( "@KnowledgeID", DbType.Int32, KnowledgeID);
            return Select(command);
        }
    }
}