

/******************************************
* Auto-generated by CodeRocket
* 31.10.2008 23:27:40
******************************************/
using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// Keyword Factory class
    ///
    //</summary>
    public partial class KeywordFactory : DbFactoryBase<KeywordValue>, IKeywordFactory
    {

        int ordinalCreationDate;
        int ordinalKeywordID;
        int ordinalKeywordStatusID;
        int ordinalKeywordTypeID;
        int ordinalName;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeywordFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public KeywordFactory(DalContext context)
            : base(context)
        {

        }
        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalCreationDate = reader.GetOrdinal("CreationDate");
            ordinalKeywordID = reader.GetOrdinal("KeywordID");
            ordinalKeywordStatusID = reader.GetOrdinal("KeywordStatusID");
            ordinalKeywordTypeID = reader.GetOrdinal("KeywordTypeID");
            ordinalName = reader.GetOrdinal("Name");
        }
        /// <summary>
        /// Maps the IDataReader values to a Keyword object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override KeywordValue MapObject(IDataReader reader)
        {
            KeywordValue result = new KeywordValue();
            result.CreationDate = reader.GetDateTime(ordinalCreationDate);
            result.KeywordID = reader.GetInt32(ordinalKeywordID);
            result.KeywordStatusID = reader.GetByte(ordinalKeywordStatusID);
            result.KeywordTypeID = reader.GetInt16(ordinalKeywordTypeID);
            result.Name = reader.GetString(ordinalName);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(KeywordValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Keyword_Insert");
            IDbDataParameter KeywordIDParameter = command.AddParameter( "@KeywordID", DbType.Int32, null, ParameterDirection.Output);
            command.AddInputParameter( "@KeywordStatusID", DbType.Byte, value.KeywordStatusID);
            command.AddInputParameter( "@KeywordTypeID", DbType.Int16, value.KeywordTypeID);
            command.AddInputParameter( "@Name", DbType.String, value.Name);
            Database.ExecuteNonQuery(command);

            value.KeywordID = (System.Int32)KeywordIDParameter.Value;
        }

        /// <summary>
        /// Updates the specified Keyword.
        /// </summary>
        /// <param name="value">The Keyword value.</param>
        public void Update(KeywordValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Keyword_Update");
            command.AddInputParameter( "@KeywordID", DbType.Int32, value.KeywordID);
            command.AddInputParameter( "@KeywordStatusID", DbType.Byte, value.KeywordStatusID);
            command.AddInputParameter( "@KeywordTypeID", DbType.Int16, value.KeywordTypeID);
            command.AddInputParameter( "@Name", DbType.String, value.Name);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets Keyword by ID.
        /// </summary>
        /// <param name="KeywordID">The KeywordID.</param>
        /// <returns></returns>
        public KeywordValue SelectByID(System.Int32 KeywordID)
        {
            IDbCommand command = Database.CreateSPCommand("Keyword_GetByID");
            command.AddInputParameter( "@KeywordID", DbType.Int32, KeywordID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified Keyword.
        /// </summary>
        /// <param name="KeywordID">The KeywordID.</param>
        public void Delete(System.Int32 KeywordID)
        {
            IDbCommand command = Database.CreateSPCommand("Keyword_Delete");
            command.AddInputParameter( "@KeywordID", DbType.Int32, KeywordID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified Keyword.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(KeywordValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Keyword_Delete");
            command.AddInputParameter( "@KeywordID", DbType.Int32, value.KeywordID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Selects all Keyword values.
        /// </summary>
        /// <returns>List of all Keyword</returns>
        public IList<KeywordValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("Keyword_GetAll"));
        }


        /// <summary>
        /// Selects Keyword values KeywordStatusID .
        /// ForeignKey: FK_Keywords_KeywordStatuses
        /// </summary>
        /// <param name="KeywordStatusID">The KeywordStatusID.</param>
        /// <returns>List of Keyword</returns>   
        public IList<KeywordValue> SelectByKeywordStatusID(System.Byte KeywordStatusID)
        {
            IDbCommand command = Database.CreateSPCommand("Keyword_GetByKeywordStatusID");
            command.AddInputParameter( "@KeywordStatusID", DbType.Byte, KeywordStatusID);
            return Select(command);
        }

        /// <summary>
        /// Selects Keyword values KeywordTypeID .
        /// ForeignKey: FK_Keywords_KeywordTypes
        /// </summary>
        /// <param name="KeywordTypeID">The KeywordTypeID.</param>
        /// <returns>List of Keyword</returns>   
        public IList<KeywordValue> SelectByKeywordTypeID(System.Int16 KeywordTypeID)
        {
            IDbCommand command = Database.CreateSPCommand("Keyword_GetByKeywordTypeID");
            command.AddInputParameter( "@KeywordTypeID", DbType.Int16, KeywordTypeID);
            return Select(command);
        }
    }
}