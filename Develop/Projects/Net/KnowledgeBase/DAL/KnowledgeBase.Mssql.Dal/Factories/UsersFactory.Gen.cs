

/******************************************
* Auto-generated by CodeRocket
* 19.10.2008 16:25:58
******************************************/

using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// User Factory class
    ///</summary>
    public partial class UserFactory : DbFactoryBase<UserValue>, IUserFactory
    {

        int ordinalCreationDate;
        int ordinalEmail;
        int ordinalFirstName;
        int ordinalIsSystem;
        int ordinalIsUserAdmin;
        int ordinalLastName;
        int ordinalLogin;
        int ordinalPassword;
        int ordinalRootPermissionID;
        int ordinalSecurityAnswer;
        int ordinalSecurityQuestion;
        int ordinalUserID;


        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public UserFactory(DalContext context) : base(context)
        {

        }

        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalCreationDate= reader.GetOrdinal("CreationDate");
            ordinalEmail= reader.GetOrdinal("Email");
            ordinalFirstName= reader.GetOrdinal("FirstName");
            ordinalIsSystem= reader.GetOrdinal("IsSystem");
            ordinalIsUserAdmin= reader.GetOrdinal("IsUserAdmin");
            ordinalLastName= reader.GetOrdinal("LastName");
            ordinalLogin= reader.GetOrdinal("Login");
            ordinalPassword= reader.GetOrdinal("Password");
            ordinalRootPermissionID= reader.GetOrdinal("RootPermissionID");
            ordinalSecurityAnswer= reader.GetOrdinal("SecurityAnswer");
            ordinalSecurityQuestion= reader.GetOrdinal("SecurityQuestion");
            ordinalUserID= reader.GetOrdinal("UserID");
        }
        /// <summary>
        /// Maps the IDataReader values to a User object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override UserValue MapObject(IDataReader reader)
        {
            UserValue result=new UserValue();
            result.CreationDate =reader.GetDateTime(ordinalCreationDate);
            result.Email =reader.GetString(ordinalEmail);
            result.FirstName =reader.GetString(ordinalFirstName);
            result.IsSystem =reader.GetBoolean(ordinalIsSystem);
            result.IsUserAdmin =reader.GetBoolean(ordinalIsUserAdmin);
            result.LastName =reader.GetString(ordinalLastName);
            result.Login =reader.GetString(ordinalLogin);
            result.Password =reader.GetString(ordinalPassword);
            result.RootPermissionID = reader.IsDBNull(ordinalRootPermissionID)? (System.Int16?)null : reader.GetInt16(ordinalRootPermissionID);  
            result.SecurityAnswer =reader.GetString(ordinalSecurityAnswer);
            result.SecurityQuestion =reader.GetString(ordinalSecurityQuestion);
            result.UserID =reader.GetInt32(ordinalUserID);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(UserValue value)
        {
            IDbCommand command = Database.CreateSPCommand("User_Insert");
            command.AddInputParameter( "@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter( "@Email", DbType.String, value.Email);
            command.AddInputParameter( "@FirstName", DbType.String, value.FirstName);
            command.AddInputParameter( "@LastName", DbType.String, value.LastName);
            command.AddInputParameter( "@Login", DbType.String, value.Login);
            command.AddInputParameter( "@Password", DbType.String, value.Password);
            command.AddInputParameter( "@RootPermissionID", DbType.Int16, value.RootPermissionID);
            command.AddInputParameter( "@SecurityAnswer", DbType.String, value.SecurityAnswer);
            command.AddInputParameter( "@SecurityQuestion", DbType.String, value.SecurityQuestion);
            IDbDataParameter UserIDParameter = command.AddParameter( "@UserID", DbType.Int32, null, ParameterDirection.Output);                      
            Database.ExecuteNonQuery(command);
			  
            value.UserID=(System.Int32)UserIDParameter.Value;   
        }
		
        /// <summary>
        /// Updates the specified User.
        /// </summary>
        /// <param name="value">The User value.</param>
        public void Update(UserValue value)
        {
            IDbCommand command = Database.CreateSPCommand("User_Update");
            command.AddInputParameter( "@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter( "@Email", DbType.String, value.Email);
            command.AddInputParameter( "@FirstName", DbType.String, value.FirstName);
            command.AddInputParameter( "@LastName", DbType.String, value.LastName);
            command.AddInputParameter( "@Login", DbType.String, value.Login);
            command.AddInputParameter( "@Password", DbType.String, value.Password);
            command.AddInputParameter( "@RootPermissionID", DbType.Int16, value.RootPermissionID);
            command.AddInputParameter( "@SecurityAnswer", DbType.String, value.SecurityAnswer);
            command.AddInputParameter( "@SecurityQuestion", DbType.String, value.SecurityQuestion);
            command.AddInputParameter( "@UserID", DbType.Int32, value.UserID);
            Database.ExecuteNonQuery(command);
			  
        }	
        /// <summary>
        /// Gets User by ID.
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        /// <returns></returns>
        public UserValue SelectByID(System.Int32 UserID)
        {
            IDbCommand command = Database.CreateSPCommand("User_GetByID");
            command.AddInputParameter( "@UserID", DbType.Int32, UserID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified User.
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        public void Delete(System.Int32 UserID)
        {
            IDbCommand command = Database.CreateSPCommand("User_Delete");
            command.AddInputParameter( "@UserID", DbType.Int32, UserID);
            Database.ExecuteNonQuery(command);
			  
        }
		
        /// <summary>
        /// Deletes the specified User.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(UserValue value)
        {
            IDbCommand command = Database.CreateSPCommand("User_Delete");
            command.AddInputParameter( "@UserID", DbType.Int32, value.UserID);
            Database.ExecuteNonQuery(command);
			  
        }
        /// <summary>
        /// Selects all User values.
        /// </summary>
        /// <returns>List of all User</returns>
        public IList<UserValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("User_GetAll"));
        }

						
        /// <summary>
        /// Selects User values RootPermissionID .
        /// ForeignKey: FK_Users_Permissions
        /// </summary>
        /// <param name="RootPermissionID">The RootPermissionID.</param>
        /// <returns>List of User</returns>   
        public IList<UserValue> SelectByRootPermissionID( System.Int16 RootPermissionID)
        {
            IDbCommand command = Database.CreateSPCommand("User_GetByRootPermissionID");
            command.AddInputParameter( "@RootPermissionID", DbType.Int16, RootPermissionID);
            return Select(command);  
        }
    }
}