

/******************************************
* Auto-generated by CodeRocket
* 04.11.2008 22:13:36
******************************************/

using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// Knowledge Factory class
    ///
    //</summary>
    public partial class KnowledgeFactory : DbFactoryBase<KnowledgeValue>, IKnowledgeFactory
    {

        int ordinalCategoryID;
        int ordinalCreationDate;
        int ordinalCreatorID;
        int ordinalKnowledgeID;
        int ordinalKnowledgeStatusID;
        int ordinalKnowledgeTypeID;
        int ordinalModificationDate;
        int ordinalModificatorID;
        int ordinalPublicID;
        int ordinalSummary;
        int ordinalTitle;

        /// <summary>
        /// Initializes a new instance of the <see cref="KnowledgeFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public KnowledgeFactory(DalContext context)
            : base(context)
        {

        }
		    
        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalCategoryID= reader.GetOrdinal("CategoryID");
            ordinalCreationDate= reader.GetOrdinal("CreationDate");
            ordinalCreatorID= reader.GetOrdinal("CreatorID");
            ordinalKnowledgeID= reader.GetOrdinal("KnowledgeID");
            ordinalKnowledgeStatusID= reader.GetOrdinal("KnowledgeStatusID");
            ordinalKnowledgeTypeID= reader.GetOrdinal("KnowledgeTypeID");
            ordinalModificationDate= reader.GetOrdinal("ModificationDate");
            ordinalModificatorID= reader.GetOrdinal("ModificatorID");
            ordinalPublicID= reader.GetOrdinal("PublicID");
            ordinalSummary= reader.GetOrdinal("Summary");
            ordinalTitle= reader.GetOrdinal("Title");
        }
        /// <summary>
        /// Maps the IDataReader values to a Knowledge object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override KnowledgeValue MapObject(IDataReader reader)
        {
            KnowledgeValue result=new KnowledgeValue();
            result.CategoryID =reader.GetInt32(ordinalCategoryID);
            result.CreationDate =reader.GetDateTime(ordinalCreationDate);
            result.CreatorID =reader.GetInt32(ordinalCreatorID);
            result.KnowledgeID =reader.GetInt32(ordinalKnowledgeID);
            result.KnowledgeStatusID =reader.GetByte(ordinalKnowledgeStatusID);
            result.KnowledgeTypeID =reader.GetInt16(ordinalKnowledgeTypeID);
            result.ModificationDate = reader.IsDBNull(ordinalModificationDate)? (System.DateTime?)null : reader.GetDateTime(ordinalModificationDate);  
            result.ModificatorID = reader.IsDBNull(ordinalModificatorID)? (System.Int32?)null : reader.GetInt32(ordinalModificatorID);  
            result.PublicID =reader.GetGuid(ordinalPublicID);
            result.Summary = reader.IsDBNull(ordinalSummary)? null : reader.GetString(ordinalSummary);
            result.Title =reader.GetString(ordinalTitle);
            return result;
        }



        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(KnowledgeValue value)
        {
 
            IDbCommand command = Database.CreateSPCommand("Knowledge_Insert");
            command.AddInputParameter( "@CategoryID", DbType.Int32, value.CategoryID);
            command.AddInputParameter( "@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter( "@CreatorID", DbType.Int32, value.CreatorID);
            IDbDataParameter KnowledgeIDParameter = command.AddParameter( "@KnowledgeID", DbType.Int32, null, ParameterDirection.Output);                      
            command.AddInputParameter( "@KnowledgeStatusID", DbType.Byte, value.KnowledgeStatusID);
            command.AddInputParameter( "@KnowledgeTypeID", DbType.Int16, value.KnowledgeTypeID);
            command.AddInputParameter( "@ModificationDate", DbType.DateTime, value.ModificationDate);
            command.AddInputParameter( "@ModificatorID", DbType.Int32, value.ModificatorID);
            command.AddInputParameter( "@Summary", DbType.String, value.Summary);
            command.AddInputParameter( "@Title", DbType.String, value.Title);
            Database.ExecuteNonQuery(command);
			  
            value.KnowledgeID=(System.Int32)KnowledgeIDParameter.Value;   
        }
		
        /// <summary>
        /// Updates the specified Knowledge.
        /// </summary>
        /// <param name="value">The Knowledge value.</param>
        public void Update(KnowledgeValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_Update");
            command.AddInputParameter( "@CategoryID", DbType.Int32, value.CategoryID);
            command.AddInputParameter( "@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter( "@CreatorID", DbType.Int32, value.CreatorID);
            command.AddInputParameter( "@KnowledgeID", DbType.Int32, value.KnowledgeID);
            command.AddInputParameter( "@KnowledgeStatusID", DbType.Byte, value.KnowledgeStatusID);
            command.AddInputParameter( "@KnowledgeTypeID", DbType.Int16, value.KnowledgeTypeID);
            command.AddInputParameter( "@ModificationDate", DbType.DateTime, value.ModificationDate);
            command.AddInputParameter( "@ModificatorID", DbType.Int32, value.ModificatorID);
            command.AddInputParameter( "@Summary", DbType.String, value.Summary);
            command.AddInputParameter( "@Title", DbType.String, value.Title);
            Database.ExecuteNonQuery(command);
			  
        }	
        /// <summary>
        /// Gets Knowledge by ID.
        /// </summary>
        /// <param name="KnowledgeID">The KnowledgeID.</param>
        /// <returns></returns>
        public KnowledgeValue SelectByID(System.Int32 KnowledgeID)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_GetByID");
            command.AddInputParameter( "@KnowledgeID", DbType.Int32, KnowledgeID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified Knowledge.
        /// </summary>
        /// <param name="KnowledgeID">The KnowledgeID.</param>
        public void Delete(System.Int32 KnowledgeID)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_Delete");
            command.AddInputParameter( "@KnowledgeID", DbType.Int32, KnowledgeID);
            Database.ExecuteNonQuery(command);
			  
        }
		
        /// <summary>
        /// Deletes the specified Knowledge.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(KnowledgeValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_Delete");
            command.AddInputParameter( "@KnowledgeID", DbType.Int32, value.KnowledgeID);
            Database.ExecuteNonQuery(command);
			  
        }
        /// <summary>
        /// Selects all Knowledge values.
        /// </summary>
        /// <returns>List of all Knowledge</returns>
        public IList<KnowledgeValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("Knowledge_GetAll"));
        }

				
        /// <summary>
        /// Selects Knowledge values CategoryID .
        /// ForeignKey: FK_Knowledges_Categories
        /// </summary>
        /// <param name="CategoryID">The CategoryID.</param>
        /// <returns>List of Knowledge</returns>   
        public IList<KnowledgeValue> SelectByCategoryID( System.Int32 CategoryID)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_GetByCategoryID");
            command.AddInputParameter( "@CategoryID", DbType.Int32, CategoryID);
            return Select(command);  
        }
   			
        /// <summary>
        /// Selects Knowledge values CreatorID .
        /// ForeignKey: FK_Knowledges_Creator
        /// </summary>
        /// <param name="CreatorID">The CreatorID.</param>
        /// <returns>List of Knowledge</returns>   
        public IList<KnowledgeValue> SelectByCreatorID( System.Int32 CreatorID)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_GetByCreatorID");
            command.AddInputParameter( "@CreatorID", DbType.Int32, CreatorID);
            return Select(command);  
        }
   			
        /// <summary>
        /// Selects Knowledge values KnowledgeStatusID .
        /// ForeignKey: FK_Knowledges_KnowledgeStatuses
        /// </summary>
        /// <param name="KnowledgeStatusID">The KnowledgeStatusID.</param>
        /// <returns>List of Knowledge</returns>   
        public IList<KnowledgeValue> SelectByKnowledgeStatusID( System.Byte KnowledgeStatusID)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_GetByKnowledgeStatusID");
            command.AddInputParameter( "@KnowledgeStatusID", DbType.Byte, KnowledgeStatusID);
            return Select(command);  
        }
   			
        /// <summary>
        /// Selects Knowledge values KnowledgeTypeID .
        /// ForeignKey: FK_Knowledges_KnowledgeTypes
        /// </summary>
        /// <param name="KnowledgeTypeID">The KnowledgeTypeID.</param>
        /// <returns>List of Knowledge</returns>   
        public IList<KnowledgeValue> SelectByKnowledgeTypeID( System.Int16 KnowledgeTypeID)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_GetByKnowledgeTypeID");
            command.AddInputParameter( "@KnowledgeTypeID", DbType.Int16, KnowledgeTypeID);
            return Select(command);  
        }
   			
        /// <summary>
        /// Selects Knowledge values ModificatorID .
        /// ForeignKey: FK_Knowledges_Modificator
        /// </summary>
        /// <param name="ModificatorID">The ModificatorID.</param>
        /// <returns>List of Knowledge</returns>   
        public IList<KnowledgeValue> SelectByModificatorID( System.Int32 ModificatorID)
        {
            IDbCommand command = Database.CreateSPCommand("Knowledge_GetByModificatorID");
            command.AddInputParameter( "@ModificatorID", DbType.Int32, ModificatorID);
            return Select(command);  
        }
    }
}