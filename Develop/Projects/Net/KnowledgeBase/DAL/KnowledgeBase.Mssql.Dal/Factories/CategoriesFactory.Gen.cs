

/******************************************
* Auto-generated by CodeRocket
* 20.10.2008 23:15:35
******************************************/
using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// Category Factory class
    ///
    //</summary>
    public partial class CategoryFactory : DbFactoryBase<CategoryValue>, ICategoryFactory
    {

        int ordinalCategoryID;
        int ordinalCreationDate;
        int ordinalName;
        int ordinalParentCategoryID;


        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalCategoryID = reader.GetOrdinal("CategoryID");
            ordinalCreationDate = reader.GetOrdinal("CreationDate");
            ordinalName = reader.GetOrdinal("Name");
            ordinalParentCategoryID = reader.GetOrdinal("ParentCategoryID");
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public CategoryFactory(DalContext context)
            : base(context)
        {

        }
        /// <summary>
        /// Maps the IDataReader values to a Category object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override CategoryValue MapObject(IDataReader reader)
        {
            CategoryValue result = new CategoryValue();
            result.CategoryID = reader.GetInt32(ordinalCategoryID);
            result.CreationDate = reader.GetDateTime(ordinalCreationDate);
            result.Name = reader.GetString(ordinalName);
            result.ParentCategoryID = reader.IsDBNull(ordinalParentCategoryID) ? (System.Int32?)null : reader.GetInt32(ordinalParentCategoryID);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(CategoryValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Category_Insert");
            IDbDataParameter CategoryIDParameter = command.AddParameter("@CategoryID", DbType.Int32, null, ParameterDirection.Output);
            command.AddInputParameter("@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter("@Name", DbType.String, value.Name);
            command.AddInputParameter("@ParentCategoryID", DbType.Int32, value.ParentCategoryID);
            Database.ExecuteNonQuery(command);

            value.CategoryID = (System.Int32)CategoryIDParameter.Value;
        }

        /// <summary>
        /// Updates the specified Category.
        /// </summary>
        /// <param name="value">The Category value.</param>
        public void Update(CategoryValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Category_Update");
            command.AddInputParameter("@CategoryID", DbType.Int32, value.CategoryID);
            command.AddInputParameter("@CreationDate", DbType.DateTime, value.CreationDate);
            command.AddInputParameter("@Name", DbType.String, value.Name);
            command.AddInputParameter("@ParentCategoryID", DbType.Int32, value.ParentCategoryID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets Category by ID.
        /// </summary>
        /// <param name="CategoryID">The CategoryID.</param>
        /// <returns></returns>
        public CategoryValue SelectByID(System.Int32 CategoryID)
        {
            IDbCommand command = Database.CreateSPCommand("Category_GetByID");
            command.AddInputParameter("@CategoryID", DbType.Int32, CategoryID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified Category.
        /// </summary>
        /// <param name="CategoryID">The CategoryID.</param>
        public void Delete(System.Int32 CategoryID)
        {
            IDbCommand command = Database.CreateSPCommand("Category_Delete");
            command.AddInputParameter("@CategoryID", DbType.Int32, CategoryID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified Category.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(CategoryValue value)
        {
            IDbCommand command = Database.CreateSPCommand("Category_Delete");
            command.AddInputParameter("@CategoryID", DbType.Int32, value.CategoryID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Selects all Category values.
        /// </summary>
        /// <returns>List of all Category</returns>
        public IList<CategoryValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("Category_GetAll"));
        }


        /// <summary>
        /// Selects Category values ParentCategoryID .
        /// ForeignKey: FK_Categories_Categories
        /// </summary>
        /// <param name="ParentCategoryID">The ParentCategoryID.</param>
        /// <returns>List of Category</returns>   
        public IList<CategoryValue> SelectByParentCategoryID(System.Int32 ParentCategoryID)
        {
            IDbCommand command = Database.CreateSPCommand("Category_GetByParentCategoryID");
            command.AddInputParameter("@ParentCategoryID", DbType.Int32, ParentCategoryID);
            return Select(command);
        }
    }
}