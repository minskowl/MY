

/******************************************
* Auto-generated by CodeRocket
* 21.02.2009 18:08:32
******************************************/

using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// FileStorage Factory class
    ///
    //</summary>
    public partial class FileStorageFactory : DbFactoryBase<FileStorageValue>, IFileStorageFactory
    {

        int ordinalFileStorageID;
        int ordinalName;
        int ordinalPath;
        int ordinalSettingsID;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStorageFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public FileStorageFactory(DalContext context)
            : base(context)
        {

        }
        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalFileStorageID = reader.GetOrdinal("FileStorageID");
            ordinalName = reader.GetOrdinal("Name");
            ordinalPath = reader.GetOrdinal("Path");
            ordinalSettingsID = reader.GetOrdinal("SettingsID");
        }
        /// <summary>
        /// Maps the IDataReader values to a FileStorage object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override FileStorageValue MapObject(IDataReader reader)
        {
            FileStorageValue result = new FileStorageValue();
            result.FileStorageID = reader.GetInt16(ordinalFileStorageID);
            result.Name = reader.GetString(ordinalName);
            result.Path = reader.GetString(ordinalPath);
            result.SettingsID = reader.GetByte(ordinalSettingsID);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(FileStorageValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileStorage_Insert");
            command.AddInputParameter( "@FileStorageID", DbType.Int16, value.FileStorageID);
            command.AddInputParameter( "@Name", DbType.String, value.Name);
            command.AddInputParameter( "@Path", DbType.String, value.Path);
            command.AddInputParameter( "@SettingsID", DbType.Byte, value.SettingsID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Updates the specified FileStorage.
        /// </summary>
        /// <param name="value">The FileStorage value.</param>
        public void Update(FileStorageValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileStorage_Update");
            command.AddInputParameter( "@FileStorageID", DbType.Int16, value.FileStorageID);
            command.AddInputParameter( "@Name", DbType.String, value.Name);
            command.AddInputParameter( "@Path", DbType.String, value.Path);
            command.AddInputParameter( "@SettingsID", DbType.Byte, value.SettingsID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets FileStorage by ID.
        /// </summary>
        /// <param name="FileStorageID">The FileStorageID.</param>
        /// <param name="SettingsID">The SettingsID.</param>
        /// <returns></returns>
        public FileStorageValue SelectByID(System.Int16 FileStorageID, System.Byte SettingsID)
        {
            IDbCommand command = Database.CreateSPCommand("FileStorage_GetByID");
            command.AddInputParameter( "@FileStorageID", DbType.Int16, FileStorageID);
            command.AddInputParameter( "@SettingsID", DbType.Byte, SettingsID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified FileStorage.
        /// </summary>
        /// <param name="FileStorageID">The FileStorageID.</param>
        /// <param name="SettingsID">The SettingsID.</param>
        public void Delete(System.Int16 FileStorageID, System.Byte SettingsID)
        {
            IDbCommand command = Database.CreateSPCommand("FileStorage_Delete");
            command.AddInputParameter( "@FileStorageID", DbType.Int16, FileStorageID);
            command.AddInputParameter( "@SettingsID", DbType.Byte, SettingsID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified FileStorage.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(FileStorageValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileStorage_Delete");
            command.AddInputParameter( "@FileStorageID", DbType.Int16, value.FileStorageID);
            command.AddInputParameter( "@SettingsID", DbType.Byte, value.SettingsID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Selects all FileStorage values.
        /// </summary>
        /// <returns>List of all FileStorage</returns>
        public IList<FileStorageValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("FileStorage_GetAll"));
        }


        /// <summary>
        /// Selects FileStorage values SettingsID .
        /// ForeignKey: FK_FileStorages_FileStorages
        /// </summary>
        /// <param name="SettingsID">The SettingsID.</param>
        /// <returns>List of FileStorage</returns>   
        public IList<FileStorageValue> SelectBySettingsID(System.Byte SettingsID)
        {
            IDbCommand command = Database.CreateSPCommand("FileStorage_GetBySettingsID");
            command.AddInputParameter( "@SettingsID", DbType.Byte, SettingsID);
            return Select(command);
        }
    }
}