

/******************************************
* Auto-generated by CodeRocket
* 11.11.2008 17:08:39
******************************************/
using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// FileLink Factory class
    ///
    //</summary>
    public partial class FileLinkFactory : DbFactoryBase<FileLinkValue>, IFileLinkFactory
    {

        int ordinalFileLinkID;
        int ordinalFileStorageID;
        int ordinalPath;
        int ordinalPublicID;
		
		    
        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalFileLinkID= reader.GetOrdinal("FileLinkID");
            ordinalFileStorageID= reader.GetOrdinal("FileStorageID");
            ordinalPath= reader.GetOrdinal("Path");
            ordinalPublicID= reader.GetOrdinal("PublicID");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileLinkFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public FileLinkFactory(DalContext context)
            : base(context)
        {

        }
        /// <summary>
        /// Maps the IDataReader values to a FileLink object
        ///</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override FileLinkValue MapObject(IDataReader reader)
        {
            FileLinkValue result=new FileLinkValue();
            result.FileLinkID =reader.GetInt32(ordinalFileLinkID);
            result.FileStorageID =reader.GetInt16(ordinalFileStorageID);
            result.Path =reader.GetString(ordinalPath);
            result.PublicID =reader.GetGuid(ordinalPublicID);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(FileLinkValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileLink_Insert");
            IDbDataParameter FileLinkIDParameter = command.AddParameter( "@FileLinkID", DbType.Int32, null, ParameterDirection.Output);                      
            command.AddInputParameter( "@FileStorageID", DbType.Int16, value.FileStorageID);
            command.AddInputParameter( "@Path", DbType.String, value.Path);
            command.AddInputParameter( "@PublicID", DbType.Guid, value.PublicID);
            Database.ExecuteNonQuery(command);
			  
            value.FileLinkID=(System.Int32)FileLinkIDParameter.Value;   
        }
		
        /// <summary>
        /// Updates the specified FileLink.
        /// </summary>
        /// <param name="value">The FileLink value.</param>
        public void Update(FileLinkValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileLink_Update");
            command.AddInputParameter( "@FileLinkID", DbType.Int32, value.FileLinkID);
            command.AddInputParameter( "@FileStorageID", DbType.Int16, value.FileStorageID);
            command.AddInputParameter( "@Path", DbType.String, value.Path);
            command.AddInputParameter( "@PublicID", DbType.Guid, value.PublicID);
            Database.ExecuteNonQuery(command);
			  
        }	
        /// <summary>
        /// Gets FileLink by ID.
        /// </summary>
        /// <param name="FileLinkID">The FileLinkID.</param>
        /// <returns></returns>
        public FileLinkValue SelectByID(System.Int32 FileLinkID)
        {
            IDbCommand command = Database.CreateSPCommand("FileLink_GetByID");
            command.AddInputParameter( "@FileLinkID", DbType.Int32, FileLinkID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified FileLink.
        /// </summary>
        /// <param name="FileLinkID">The FileLinkID.</param>
        public void Delete(System.Int32 FileLinkID)
        {
            IDbCommand command = Database.CreateSPCommand("FileLink_Delete");
            command.AddInputParameter( "@FileLinkID", DbType.Int32, FileLinkID);
            Database.ExecuteNonQuery(command);
			  
        }
		
        /// <summary>
        /// Deletes the specified FileLink.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(FileLinkValue value)
        {
            IDbCommand command = Database.CreateSPCommand("FileLink_Delete");
            command.AddInputParameter( "@FileLinkID", DbType.Int32, value.FileLinkID);
            Database.ExecuteNonQuery(command);
			  
        }
        /// <summary>
        /// Selects all FileLink values.
        /// </summary>
        /// <returns>List of all FileLink</returns>
        public IList<FileLinkValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("FileLink_GetAll"));
        }

			
        /// <summary>
        /// Selects FileLink values FileStorageID .
        /// ForeignKey: FK_FileLinks_FileStorages
        /// </summary>
        /// <param name="FileStorageID">The FileStorageID.</param>
        /// <returns>List of FileLink</returns>   
        public IList<FileLinkValue> SelectByFileStorageID( System.Int16 FileStorageID)
        {
            IDbCommand command = Database.CreateSPCommand("FileLink_GetByFileStorageID");
            command.AddInputParameter( "@FileStorageID", DbType.Int16, FileStorageID);
            return Select(command);  
        }
    }
}