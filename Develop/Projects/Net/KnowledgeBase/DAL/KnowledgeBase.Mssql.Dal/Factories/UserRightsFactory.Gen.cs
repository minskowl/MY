

/******************************************
* Auto-generated by CodeRocket
* 13.10.2008 21:25:57
******************************************/

using System.Collections.Generic;
using System.Data;
using KnowledgeBase.Dal;
using KnowledgeBase.DAL;
using Savchin.Data.Common;

namespace KnowledgeBase.Mssql.Dal
{
    /// <summary>
    /// UserRight Factory class
    ///
    ///</summary>
    public partial class UserRightFactory : DbFactoryBase<UserRightValue>, IUserRightFactory
    {

        int ordinalCategoryID;
        int ordinalPermissionID;
        int ordinalUserID;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserRightFactory"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public UserRightFactory(DalContext context)
            : base(context)
        {

        }
        protected override void InitOrdinals(IDataReader reader)
        {
            ordinalCategoryID = reader.GetOrdinal("CategoryID");
            ordinalPermissionID = reader.GetOrdinal("PermissionID");
            ordinalUserID = reader.GetOrdinal("UserID");
        }
        /// <summary>
        /// Maps the IDataReader values to a UserRight object
        //</summary>
        /// <param name="reader">The IDataReader to map</param>
        protected override UserRightValue MapObject(IDataReader reader)
        {
            UserRightValue result = new UserRightValue();
            result.CategoryID = reader.GetInt32(ordinalCategoryID);
            result.PermissionID = reader.GetInt16(ordinalPermissionID);
            result.UserID = reader.GetInt32(ordinalUserID);
            return result;
        }

        /// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public void Insert(UserRightValue value)
        {
            IDbCommand command = Database.CreateSPCommand("UserRight_Insert");
            command.AddInputParameter( "@CategoryID", DbType.Int32, value.CategoryID);
            command.AddInputParameter( "@PermissionID", DbType.Int16, value.PermissionID);
            command.AddInputParameter( "@UserID", DbType.Int32, value.UserID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Updates the specified UserRight.
        /// </summary>
        /// <param name="value">The UserRight value.</param>
        public void Update(UserRightValue value)
        {
            IDbCommand command = Database.CreateSPCommand("UserRight_Update");
            command.AddInputParameter( "@CategoryID", DbType.Int32, value.CategoryID);
            command.AddInputParameter( "@PermissionID", DbType.Int16, value.PermissionID);
            command.AddInputParameter( "@UserID", DbType.Int32, value.UserID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Gets UserRight by ID.
        /// </summary>
        /// <param name="CategoryID">The CategoryID.</param>
        /// <param name="UserID">The UserID.</param>
        /// <returns></returns>
        public UserRightValue SelectByID(System.Int32 CategoryID, System.Int32 UserID)
        {
            IDbCommand command = Database.CreateSPCommand("UserRight_GetByID");
            command.AddInputParameter( "@CategoryID", DbType.Int32, CategoryID);
            command.AddInputParameter( "@UserID", DbType.Int32, UserID);
            return SelectSingle(command);
        }

        /// <summary>
        /// Deletes the specified UserRight.
        /// </summary>
        /// <param name="CategoryID">The CategoryID.</param>
        /// <param name="UserID">The UserID.</param>
        public void Delete(System.Int32 CategoryID, System.Int32 UserID)
        {
            IDbCommand command = Database.CreateSPCommand("UserRight_Delete");
            command.AddInputParameter( "@CategoryID", DbType.Int32, CategoryID);
            command.AddInputParameter( "@UserID", DbType.Int32, UserID);
            Database.ExecuteNonQuery(command);

        }

        /// <summary>
        /// Deletes the specified UserRight.
        /// </summary>
        /// <param name="value">The value.</param>
        public void Delete(UserRightValue value)
        {
            IDbCommand command = Database.CreateSPCommand("UserRight_Delete");
            command.AddInputParameter( "@CategoryID", DbType.Int32, value.CategoryID);
            command.AddInputParameter( "@UserID", DbType.Int32, value.UserID);
            Database.ExecuteNonQuery(command);

        }
        /// <summary>
        /// Selects all UserRight values.
        /// </summary>
        /// <returns>List of all UserRight</returns>
        public IList<UserRightValue> SelectAll()
        {
            return Select(Database.CreateSPCommand("UserRight_GetAll"));
        }


        /// <summary>
        /// Selects UserRight values CategoryID .
        /// ForeignKey: FK_UserRights_Categories
        /// </summary>
        /// <param name="CategoryID">The CategoryID.</param>
        /// <returns>List of UserRight</returns>   
        public IList<UserRightValue> SelectByCategoryID(System.Int32 CategoryID)
        {
            IDbCommand command = Database.CreateSPCommand("UserRight_GetByCategoryID");
            command.AddInputParameter( "@CategoryID", DbType.Int32, CategoryID);
            return Select(command);
        }

        /// <summary>
        /// Selects UserRight values UserID .
        /// ForeignKey: FK_UserRights_Users
        /// </summary>
        /// <param name="UserID">The UserID.</param>
        /// <returns>List of UserRight</returns>   
        public IList<UserRightValue> SelectByUserID(System.Int32 UserID)
        {
            IDbCommand command = Database.CreateSPCommand("UserRight_GetByUserID");
            command.AddInputParameter( "@UserID", DbType.Int32, UserID);
            return Select(command);
        }
    }
}