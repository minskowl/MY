

/******************************************
* Auto-generated by CodeRocket
* 24.05.2008 18:23:30
******************************************/

using System;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using KnowledgeBase.BussinesLayer.Core;
using KnowledgeBase.BussinesLayer.Security;
using KnowledgeBase.Core;
using KnowledgeBase.DAL;
using Savchin.Text;

namespace KnowledgeBase.BussinesLayer.Managers
{
    /// <summary>
    /// Category Manager class
    ///</summary>
    public class CategoryManager : ManagerBase<ICategoryFactory, Category, CategoryValue>, ICategoryManager
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryManager"/> class.
        /// </summary>
        public CategoryManager(KbContext context, IFactoryProvider provider)
            : base(context, provider.CreateCategoryFactory())
        {
        
        }

        #region Getteres

        #region Entitites
        /// <summary>
        /// Selects all.
        /// </summary>
        /// <returns></returns> 
        public List<Category> GetAll()
        {
            return Wrap(Factory.SelectAll());
        }
        /// <summary>
        /// Gets the by ID.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        public Category GetByID(System.Int32 id)
        {
            return Wrap(Factory.SelectByID(id));
        }
        /// <summary>
        /// Gets the root level.
        /// </summary>
        /// <returns></returns>
        public IList<Category> GetRootLevel()
        {
            return Wrap(Factory.SelectRootLevel());
        }

        /// <summary>
        /// Gets the by parent category ID.
        /// </summary>
        /// <param name="parentCategoryID">The parent category ID.</param>
        /// <returns></returns>
        public IList<Category> GetByParentCategoryID(int parentCategoryID)
        {

            return Identifier.IsValid(parentCategoryID) ?
                Wrap(Factory.SelectByParentCategoryID(parentCategoryID)) : GetRootLevel();
        }

        /// <summary>
        /// Gets the tree.
        /// </summary>
        /// <returns></returns>
        public IList<TreeNode> GetTree()
        {
            return Factory.GetTree();
        }
        #endregion

        /// <summary>
        /// Gets the short info by parent category ID.
        /// </summary>
        /// <param name="ParentCategoryID">The parent category ID.</param>
        /// <returns></returns>
        public DataView GetShortInfoByParentCategoryID(int ParentCategoryID)
        {
            var childrens =Context.CategoryTree.GetChild(ParentCategoryID);
            if (childrens.Length==0) return null;

            var permissions = Context.PermissionSet;
            var visibleCategories = childrens.Where(e => permissions[e].HasPermission(Permission.View)).ToArray();

            if (visibleCategories.Length == 0) return null;

            var view = Factory.GetShortInfoByParentCategoryID(ParentCategoryID).Tables[0].DefaultView;
            view.RowFilter = string.Format("CategoryID IN ({0})", visibleCategories.Join(",")); ;
            return view;
        }

        /// <summary>
        /// Checks the is parent.
        /// </summary>
        /// <param name="categoryID">The category ID.</param>
        /// <param name="childCategoryId">The child category id.</param>
        /// <returns></returns>
        public bool CheckIsParent(int categoryID, int childCategoryId)
        {
            if (categoryID == childCategoryId)
                return true;
            if (childCategoryId == 0)
                return false;

            Category category = GetByID(childCategoryId);
            do
            {
                if (categoryID == category.CategoryID)
                {

                    return true;
                }
                if (category.ParentCategory == null)
                    break;
                category = category.ParentCategory;
            } while (true);
            return false;
        }

        #endregion

        /// <summary>
        /// Finds the name of the by.
        /// </summary>
        /// <param name="matcher">The matcher.</param>
        /// <returns></returns>
        public List<Category> FindByName(string matcher)
        {
            return Wrap(Factory.FindByName(matcher));
        }

        /// <summary>
        /// Saves the specified Category.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public virtual void Save(Category entity)
        {
            if(entity.Context==null)
                entity.Context = Context;

            entity.Validate();
            if (Identifier.IsValid(entity.CategoryID))
            {
                Context.RequirePermission(entity.CategoryID, Permission.Admin);
                Factory.Update(entity.ObjectValue);
            }
            else
            {
                Context.RequirePermission(entity.ParentCategoryID ?? 0, Permission.Admin);
                entity.CreationDate = DateTime.Now.ToUniversalTime();
                
                Factory.Insert(entity.ObjectValue);
            }
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public virtual void Delete(Category entity)
        {
            Context.RequirePermission(entity.ParentCategoryID ?? 0, Permission.Admin);
            Factory.Delete(entity.ObjectValue);
        }




    }
}