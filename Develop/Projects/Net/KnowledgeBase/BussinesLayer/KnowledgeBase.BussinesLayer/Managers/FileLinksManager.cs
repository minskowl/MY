

/******************************************
* Auto-generated by CodeRocket
* 11.11.2008 17:08:39
******************************************/

using System;
using System.Collections.Generic;
using System.IO;
using KnowledgeBase.BussinesLayer.Core;
using KnowledgeBase.Core;
using KnowledgeBase.DAL;

namespace KnowledgeBase.BussinesLayer.Managers
{

    /// <summary>
    /// FileLink Manager class
    ///</summary>
    public class FileLinkManager : ManagerBase< IFileLinkFactory, FileLink, FileLinkValue>, IFileLinkManager
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileLinkManager"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="provider">The provider.</param>
        public FileLinkManager(KbContext context, IFactoryProvider provider)
            : base(context,provider.CreateFileLinkFactory())
        {
         
        }

        /// <summary>
        /// Get all.
        /// </summary>
        /// <returns></returns> 
        public IList<FileLink> GetAll()
        {
            return Wrap(Factory.SelectAll());
        }
        /// <summary>
        /// Ges the FileLink by ID.
        /// </summary>
        /// <param name="FileLinkID">The FileLinkID.</param>
        /// <returns></returns>        
        public FileLink GetByID(System.Int32 FileLinkID)
        {
            return Wrap(Factory.SelectByID(FileLinkID));
        }

        /// <summary>
        /// Gets the by public ID.
        /// </summary>
        /// <param name="publicID">The public ID.</param>
        /// <returns></returns>
        public FileLink GetByPublicID(Guid publicID)
        {
            return Wrap(Factory.GetByPublicID(publicID));
        }

        /// <summary>
        /// Gets the by file storage ID by path.
        /// </summary>
        /// <param name="FileStorageID">The file storage ID.</param>
        /// <param name="Path">The path.</param>
        /// <returns></returns>
        public FileLink GetByFileStorageIDByPath(Int16 FileStorageID, string Path)
        {
            return Wrap(Factory.SelectByFileStorageIDByPath(FileStorageID, Path));
        }


        /// <summary>
        /// Get FileLink values FileStorageID .
        /// </summary>
        /// <param name="FileStorageID">The FileStorageID.</param>
        /// <returns>List of FileLink</returns>   
        public IList<FileLink> GetByFileStorageID(System.Int16 FileStorageID)
        {
            return Wrap(Factory.SelectByFileStorageID(FileStorageID));
        }

        /// <summary>
        /// Gets the by path.
        /// </summary>
        /// <param name="filePath">The file path.</param>
        /// <returns></returns>
        public FileLink GetByPath(string filePath)
        {
            if(!File.Exists(filePath))
            {
                throw new FileNotFoundException("File not found", filePath);
            }

            FileStorage storage= Context.ManagerFileStorage.GetByPath(filePath);
            if(storage==null)
            {
                throw new InvalidOperationException(string.Format("Storage not found for path '{0}'", filePath));
            }

            string storagePath = filePath.Substring(storage.Path.Length);
            FileLink result = GetByFileStorageIDByPath(storage.FileStorageID, storagePath);
            if(result==null)
            {
                result= new FileLink();
                result.FileStorageID = storage.FileStorageID;
                result.Path = storagePath;
                result.ObjectValue.PublicID = Guid.NewGuid();
                Save(result);
            }

            return result;
        }

        /// <summary>
        /// Saves the specified FileLink.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Save(FileLink entity)
        {
            entity.Validate();
            if (Identifier.IsValid(entity.FileLinkID))
            {
                Factory.Update(entity.ObjectValue);
            }
            else
            {
                Factory.Insert(entity.ObjectValue);
            }
        }


        /// <summary>
        /// Deletes the specified FileLink.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Delete(FileLink entity)
        {
            Factory.Delete(entity.ObjectValue);
        }

      
    }
}