#set( $entity="${tools.getSingularName($table.Alias)}")

#set($pkCallingArgumets="")
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
#set($pkCallingArgumets="${pkCallingArgumets} ${column.MemberName},")
#end
#end
#set($pkCallingArgumets="${tools.CutString($pkCallingArgumets,1)}")

/******************************************
* Auto-generated by CodeRocket
* $datetimenow
******************************************/
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using ${namespace}.Core;
using Savchin.Data.Common;

#macro( AddInputParameter $column $var )
	command.AddInputParameter( "@${column.Name}", DbType.${column.DbDataType}, $var);
#end 
namespace ${namespace}.DAL
{

	/// <summary>
	/// ${entity} Factory class
	///
	//</summary>
	public partial class ${entity}Factory : FactoryBase<${entity}Value>
	{

		#foreach($column in $table.ActiveColumns)
		int ordinal${column.Name};
		#end

		    
		protected override void InitOrdinals(IDataReader reader)
		{
		#foreach($column in $table.ActiveColumns)
		  ordinal${column.Name}= reader.GetOrdinal("${column.Name}");
		#end
		}
		/// <summary>
		/// Maps the IDataReader values to a $entity object
		//</summary>
		/// <param name="reader">The IDataReader to map</param>
		protected override ${entity}Value MapObject(IDataReader reader)
		{
		   ${entity}Value result=new ${entity}Value();
		#foreach($column in $table.ActiveColumns)
		 #if ($column.AllowNulls)
		  #if ($column.NetType=="System.String")
		    result.${column.ProperName} = reader.IsDBNull(ordinal${column.Name})? null : reader.Get${column.NetType.substring(7)}(ordinal${column.Name});
		  #else
		    result.${column.ProperName} = reader.IsDBNull(ordinal${column.Name})? (${column.NetType}?)null : reader.Get${column.NetType.substring(7)}(ordinal${column.Name});  
		  #end
		 #else
  	 	  result.${column.ProperName} =reader.Get${column.NetType.substring(7)}(ordinal${column.Name});
		 #end
		#end
		  return result;
		}

		/// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
		public void Insert(${entity}Value value)
		{
			IDbCommand command = Database.CreateSPCommand("${entity}_Insert");
#foreach($column in $table.ActiveColumns)
  #if($column.IsAutoIncrement)         
			IDbDataParameter ${column.Name}Parameter = DBConnection.AddParameterToCommand(command, "@${column.Name}", DbType.${column.DbDataType}, null, ParameterDirection.Output);                      
  #else
     #if(!$column.IsReadOnly)  
            #AddInputParameter($column "value.${column.ProperName}")
	 #end	
  #end	
#end
			 Database.ExecuteNonQuery(command);
			  
#foreach($column in $table.ActiveColumns)
  #if($column.IsAutoIncrement)
            value.${column.Name}=(${column.NetType})${column.Name}Parameter.Value;   
  #end	
#end
		}
		
		/// <summary>
        /// Updates the specified ${entity}.
        /// </summary>
        /// <param name="value">The ${entity} value.</param>
		public void Update(${entity}Value value)
		{
			IDbCommand command = Database.CreateSPCommand("${entity}_Update");
#foreach($column in $table.ActiveColumns)
	#if(!$column.IsReadOnly)  
            #AddInputParameter($column "value.${column.ProperName}")
    #end        
#end
			Database.ExecuteNonQuery(command);
			  
		}	
#if($table.PrimaryKeyColumns.Count>0)		
#set( $paramListId="")
#foreach($column in $table.PrimaryKeyColumns )
  #set( $paramListId="${paramListId}${column.NetType} ${column.Alias},")
#end
#set( $paramListId=$tools.cutString($paramListId,1))
        /// <summary>
        /// Gets ${entity} by ID.
        /// </summary>
#foreach($column in $table.PrimaryKeyColumns )
        /// <param name="${column.Alias}">The ${column.Alias}.</param>
#end        
        /// <returns></returns>
		public ${entity}Value SelectByID(${paramListId})
		{
			IDbCommand command = Database.CreateSPCommand("${entity}_GetByID");
#foreach($column in $table.PrimaryKeyColumns )
            #AddInputParameter($column $column.Alias)
#end			
			return SelectSingle(command);
		}

        /// <summary>
        /// Deletes the specified ${entity}.
        /// </summary>
#foreach($column in $table.PrimaryKeyColumns )
        /// <param name="${column.Alias}">The ${column.Alias}.</param>
#end   
		public void Delete(${paramListId})
		{
			IDbCommand command = Database.CreateSPCommand("${entity}_Delete");
#foreach($column in $table.PrimaryKeyColumns )
            command.AddInputParameter( "@${column.Name}", DbType.${column.DbDataType}, ${column.Alias});
#end
			Database.ExecuteNonQuery(command);
			  
		}
		
        /// <summary>
        /// Deletes the specified ${entity}.
        /// </summary>
        /// <param name="value">The value.</param>
		public void Delete(${entity}Value value)
		{
			IDbCommand command = Database.CreateSPCommand("${entity}_Delete");
#foreach($column in $table.PrimaryKeyColumns )
            command.AddInputParameter( "@${column.Name}", DbType.${column.DbDataType}, value.${column.ProperName});
#end
			Database.ExecuteNonQuery(command);
			  
		}
#end				
        /// <summary>
        /// Selects all ${entity} values.
        /// </summary>
        /// <returns>List of all ${entity}</returns>
        public IList<${entity}Value> SelectAll()
        {
            return Select(Database.CreateSPCommand("${entity}_GetAll"));
        }
##region Foreign Keys

#foreach($key in $table.ForeignKeys  )
	#if($key.ForeignTableName ==$table.Name)
		#set($columns=$key.Associations.GetForeignColumns())
		#set($tmp="${tools.joinCollection($columns,'By','Alias')}")
		
		/// <summary>
        /// Selects ${entity} values ${tmp} .
        /// ForeignKey: ${key.Name}
        /// </summary>
		   #foreach($column in $columns  )
		/// <param name="${column.Alias}">The ${column.Alias}.</param>
		   #end        
		/// <returns>List of ${entity}</returns>   
				public IList<${entity}Value> SelectBy${tmp}(${tools.getFunctionParamList($columns)})
				{
 					IDbCommand command = Database.CreateSPCommand("${entity}_GetBy${tmp}");
		#foreach($column in $columns )
					command.AddInputParameter( "@${column.Name}", DbType.${column.DbDataType}, ${column.Alias});
		#end	     
					return Select(command);  
				}
   #end   
#end  
 ##endregion
	}
}