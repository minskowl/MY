#set( $entity="${tools.getSingularName($table.Alias)}")
#set( $columnListSelect="")
#set( $hasIdentity=false)
#set( $hasPrimaryKey=false)
#set( $identityColumn=false)
#foreach($column in $table.ActiveColumns)
  #set( $columnListSelect="${columnListSelect}[${column.Name}],")
  #if($column.IsAutoIncrement)
    #set( $identityColumn=$column)
    #set( $hasIdentity=true)	
  #end	
#end
#set( $columnListSelect=$tools.cutString($columnListSelect,1))
#set( $whereList=$t.getWhereCriteria($table.PrimaryKeyColumns))
/******************************************
* Auto-generated by CodeRocket
* $datetimenow
******************************************/
using System;
using System.Collections.Generic;
using System.Data;
using ${namespace}.Core;
using ${namespace}.DAL;
using Savchin.Data.Common;

#macro( AddInputParameter $column $var )
	command.AddInputParameter("@${column.Name}", DbType.${column.DbDataType}, $var);
#end 
namespace ${namespace}.SqlLite.Dal.Factories
{

	/// <summary>
	/// ${entity} Factory class
	///</summary>
	public partial class ${entity}Factory : FactoryBase<${entity}Value>
	{
		private const string SelectQuery="SELECT ${columnListSelect} FROM [${table.Name}]";
#foreach($column in $table.ActiveColumns)
		private int _ordinal${column.Name};
#end

    /// <summary>
    /// Inits the ordinals.
    /// </summary>
    /// <param name="reader">The reader.</param>		    
		protected override void InitOrdinals(IDataReader reader)
		{
#foreach($column in $table.ActiveColumns)
		  _ordinal${column.Name}= reader.GetOrdinal("${column.Name}");
#end
		}
		
		/// <summary>
		/// Maps the IDataReader values to a $entity object
		///</summary>
		/// <param name="reader">The IDataReader to map</param>
		protected override ${entity}Value MapObject(IDataReader reader)
		{
		   var result=new ${entity}Value();
		#foreach($column in $table.ActiveColumns)
		 #if ($column.AllowNulls)
		  #if ($column.NetType=="System.String")
		    result.${column.ProperName} = reader.IsDBNull(_ordinal${column.Name})? null : reader.Get${column.NetType.substring(7)}(_ordinal${column.Name});
		  #else
		    result.${column.ProperName} = reader.IsDBNull(_ordinal${column.Name})? (${column.NetType}?)null : reader.Get${column.NetType.substring(7)}(_ordinal${column.Name});  
		  #end
		 #else
  	 	  result.${column.ProperName} =reader.Get${column.NetType.substring(7)}(_ordinal${column.Name});
		 #end
		#end
		  return result;
		}

#set( $InsertColumnList="")
#set( $InsertValueList="")

#foreach($column in $table.ActiveColumns)
	#if(!$column.IsAutoIncrement && !$column.IsReadOnly)
		#set( $InsertColumnList="${InsertColumnList}[${column.Name}],")
	    #set( $InsertValueList="${InsertValueList}@${column.Name},")
	#end	
#end

#set( $InsertColumnList=$tools.cutString($InsertColumnList,1))
#set( $InsertValueList=$tools.cutString($InsertValueList,1))


		/// <summary>
        /// Creates the insert command.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
		public void Insert(${entity}Value value)
		{
			var command = Database.CreateSqlCommand(@"
INSERT INTO [${table.Name}] (${InsertColumnList})
VALUES (${InsertValueList});
#if($hasIdentity)  
SELECT last_insert_rowid();
#end  			
			");
#foreach($column in $table.ActiveColumns)
#if(!$column.IsAutoIncrement && !$column.IsReadOnly)         
          #AddInputParameter($column "value.${column.ProperName}")
#end	
#end
#if($hasIdentity)
        value.${identityColumn.Name} = (${identityColumn.NetType})(long)Database.ExecuteScalar(command);
#else
	 	    Database.ExecuteNonQuery(command);
#end			 

		}


#set( $setList="")

#foreach($column in $table.ActiveColumns)
	#if(!$column.IsAutoIncrement)
		#set( $setList="${setList}[${column.Name}]=@${column.Name},")
	#end
#end
#set( $setList=$tools.cutString($setList,1))

		/// <summary>
        /// Updates the specified ${entity}.
        /// </summary>
        /// <param name="value">The ${entity} value.</param>
		public void Update(${entity}Value value)
		{
			var command = Database.CreateSqlCommand(@"
		UPDATE [${table.Name}]
		SET ${setList}
		WHERE ${whereList};");
#foreach($column in $table.ActiveColumns)
         #AddInputParameter($column "value.${column.ProperName}")
#end
			Database.ExecuteNonQuery(command);
			  
		}	
#if($table.PrimaryKeyColumns.Count>0)		
#set( $paramListId="")
#foreach($column in $table.PrimaryKeyColumns )
  #set( $paramListId="${paramListId}${column.NetType} ${column.Alias},")
#end
#set( $paramListId=$tools.cutString($paramListId,1))
        /// <summary>
        /// Gets ${entity} by ID.
        /// </summary>
#foreach($column in $table.PrimaryKeyColumns )
        /// <param name="${column.Alias}">The ${column.Alias}.</param>
#end        
        /// <returns></returns>
		public ${entity}Value SelectByID(${paramListId})
		{
			var command = Database.CreateSqlCommand(SelectQuery +"	WHERE ${whereList}");
#foreach($column in $table.PrimaryKeyColumns )
        #AddInputParameter($column $column.Alias)
#end			
			return SelectSingle(command);
		}

        /// <summary>
        /// Deletes the specified ${entity}.
        /// </summary>
#foreach($column in $table.PrimaryKeyColumns )
        /// <param name="${column.Alias}">The ${column.Alias}.</param>
#end   
		public void Delete(${paramListId})
		{
			var command = Database.CreateSqlCommand(@"
		DELETE FROM [${table.Name}]
		 WHERE ${whereList};");
#foreach($column in $table.PrimaryKeyColumns )
            command.AddInputParameter("@${column.Name}", DbType.${column.DbDataType}, ${column.Alias});
#end
			Database.ExecuteNonQuery(command);
			  
		}
		
        /// <summary>
        /// Deletes the specified ${entity}.
        /// </summary>
        /// <param name="value">The value.</param>
		public void Delete(${entity}Value value)
		{		
       Delete(${t.joinEx($table.PrimaryKeyColumns,'value.{0}',',','ProperName')});
		}
#end				
        /// <summary>
        /// Selects all ${entity} values.
        /// </summary>
        /// <returns>List of all ${entity}</returns>
        public IList<${entity}Value> SelectAll()
        {
            return Select(Database.CreateSqlCommand(SelectQuery));
        }
##region Foreign Keys

#foreach($key in $table.ForeignKeys)
#if($key.ForeignTableName ==$table.Name)
		#set($columns=$key.Associations.GetForeignColumns())
		#set($tmp="${tools.joinCollection($columns,'By','Alias')}")
		
		/// <summary>
        /// Selects ${entity} values ${tmp} .
        /// ForeignKey: ${key.Name}
        /// </summary>
#foreach($column in $columns  )
		/// <param name="${column.Alias}">The ${column.Alias}.</param>
#end        
		/// <returns>List of ${entity}</returns>   
			public IList<${entity}Value> SelectBy${tmp}(${tools.getFunctionParamList($columns)})
			{
				var command = Database.CreateSqlCommand(SelectQuery+ " WHERE ${t.getWhereCriteria($columns)};");
	#foreach($column in $columns )
				command.AddInputParameter("@${column.Name}", DbType.${column.DbDataType}, ${column.Alias});
	#end	     
				return Select(command);  
			}
#end   
#end  
 ##endregion
	}
}