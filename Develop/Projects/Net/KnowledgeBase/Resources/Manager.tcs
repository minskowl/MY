#set( $entity="${tools.getSingularName($table.Alias)}")
#set( $dao = "${entity}Dao" )
#set( $baseInteface = "I${entity}ForDao" )
#set( $identifier = "${entity}Identifier" )

#set($pkCallingArgumets="")
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
#set($pkCallingArgumets="${pkCallingArgumets} ${column.MemberName},")
#end
#end
#set($pkCallingArgumets="${tools.CutString($pkCallingArgumets,1)}")

#if($table.PrimaryKeyColumns.Count>0)          
	#set( $paramListId="")
	#set( $paramList1Id="${tools.joinCollection($table.PrimaryKeyColumns,',','Alias')}")
	#foreach($column in $table.PrimaryKeyColumns )
	  #set( $paramListId="${paramListId}${column.NetType} ${column.Alias},")
	#end
	#set( $paramListId=$tools.cutString($paramListId,1))
#end
/******************************************
* Auto-generated by CodeRocket
* $datetimenow
******************************************/
using System;
using System.Collections.Generic;
using ${namespace}.BussinesLayer.Core;
using ${namespace}.Core;
using ${namespace}.DAL;

namespace ${namespace}.BussinesLayer
{

	/// <summary>
	/// ${entity} Manager class
	///
	//</summary>
	public class ${entity}Manager : ManagerBase<${entity}Manager, ${entity}Factory>
	{

          
        ##region Getters
        /// <summary>
        /// Get all.
        /// </summary>
        /// <returns></returns> 
        public IList<${entity}> GetAll()
        {
            return Wrap(factory.SelectAll());
        }
#if($table.PrimaryKeyColumns.Count>0)          
			/// <summary>
			/// Ges the ${entity} by ID.
			/// </summary>
	#foreach($column in $table.PrimaryKeyColumns )
			/// <param name="${column.Alias}">The ${column.Alias}.</param>
	#end   
			/// <returns></returns>        
			public ${entity} GetByID(${paramListId})
			{
				return Wrap(factory.SelectByID(${paramList1Id}));
			}           
  
#end  
##region Foreign Keys

#foreach($key in $table.ForeignKeys  )
	#if($key.ForeignTableName ==$table.Name)
		#set($columns=$key.Associations.GetForeignColumns())
		#set($tmp="${tools.joinCollection($columns,'By','Alias')}")
		
		/// <summary>
        /// Get ${entity} values ${tmp} .
        /// </summary>
		   #foreach($column in $columns  )
		/// <param name="${column.Alias}">The ${column.Alias}.</param>
		   #end        
		/// <returns>List of ${entity}</returns>   
				public IList<${entity}> GetBy${tmp}(${tools.getFunctionParamList($columns)})
				{
 					   return Wrap(factory.SelectBy${tmp}(${tools.joinCollection($columns,',','Alias')}));
				}
   #end   
#end  
 ##endregion
 
   ##endregion     
   
  #set( $tmp="")
  #foreach($column in $table.PrimaryKeyColumns)
  #set( $tmp="${tmp}Identifier.IsValid(entity.${column.Name})&&")
  #end  
  #set( $tmp=$tools.cutString($tmp,2))      
        /// <summary>
        /// Saves the specified ${entity}.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Save(${entity} entity)
        {
            entity.Validate();
            if (${tmp})
            {
                factory.Update(entity.ObjectValue);
            }
            else
            {
                factory.Insert(entity.ObjectValue);
            }
        }
#if($table.PrimaryKeyColumns.Count>0)  

    
        /// <summary>
        /// Deletes the specified ${entity}.
        /// </summary>
        /// <param name="entity">The entity.</param>
		public void Delete(${entity} entity)
        {
			factory.Delete(entity.ObjectValue);
        }  
 #end        
      
        /// <summary>
        /// Wraps the specified values.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        private IList<${entity}> Wrap(ICollection<${entity}Value> values)
        {
           List<${entity}> result= new List<${entity}>(values.Count);
            foreach (${entity}Value value in values)
            {
                result.Add(new ${entity}(value));
            }
            return result;
        }
        
        /// <summary>
        /// Wraps the specified value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private ${entity} Wrap(${entity}Value value)
        {
            return (value == null) ? null : new ${entity}(value);
        }
    }
}