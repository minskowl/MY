#region CPL License
/*
Nuclex Framework
Copyright (C) 2002-2009 Nuclex Development Labs

This library is free software; you can redistribute it and/or
modify it under the terms of the IBM Common Public License as
published by the IBM Corporation; either version 1.0 of the
License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
IBM Common Public License for more details.

You should have received a copy of the IBM Common Public
License along with this library
*/
#endregion

using System;
using System.Collections.Generic;

using Microsoft.Xna.Framework.Graphics;

using Nuclex.Graphics.Batching;

namespace Nuclex.Graphics.SpecialEffects.Particles.HighLevel {

  /// <summary>Renders particles into a primitive batch</summary>
  /// <typeparam name="ParticleType">Data type of the particles</typeparam>
  /// <typeparam name="VertexType">
  ///   Type of vertices being generated by the renderer
  /// </typeparam>
  /// <remarks>
  ///   <para>
  ///     This interface is used by the particle system manager to send the particles
  ///     contained in a particle system to a primitive batch for rendering.
  ///   </para>
  ///   <para>
  ///     In the simplest case, where your particle structure and vertex structure
  ///     are the same, the renderer can simply add the particles given to it into
  ///     the primitive batch.
  ///   </para>
  ///   <para>
  ///     If, on the other hand, your particle structure is different from your vertex
  ///     structure (maybe your particles need additional processing, like a billboard
  ///     that needs to know of the camera location), the renderer can do virtually
  ///     anything to procure the vertices a particle translates into.
  ///   </para>
  /// </remarks>
  public interface IParticleRenderer<ParticleType, VertexType>
    where VertexType : struct
#if XNA_4
, IVertexType
#endif
 {

    /// <summary>Renders a series of particles</summary>
    /// <param name="particles">Particles that will be rendered</param>
    /// <param name="primitiveBatch">
    ///   Primitive batch that will receive the vertices generated by the particles
    /// </param>
    void Render(
      ArraySegment<ParticleType> particles,
      PrimitiveBatch<VertexType> primitiveBatch
    );

  }

  /// <summary>Renders the particles in a particle system</summary>
  /// <typeparam name="ParticleType">Data type of the particles</typeparam>
  /// <remarks>
  ///   This is just a simplification you can use if your particle structure and
  ///   vertex structure are one and the same.
  /// </remarks>
  public interface IParticleRenderer<ParticleType> :
    IParticleRenderer<ParticleType, ParticleType>
    where ParticleType : struct
#if XNA_4
, IVertexType
#endif
 { }

} // namespace Nuclex.Graphics.SpecialEffects.Particles.HighLevel
