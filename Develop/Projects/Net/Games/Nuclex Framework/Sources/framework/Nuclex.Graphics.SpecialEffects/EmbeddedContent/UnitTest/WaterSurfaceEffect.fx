// --------------------------------------------------------------------------------------------- //
// WaterSurface Effect
// --------------------------------------------------------------------------------------------- //
//
// Draws a water surface with reflections coming from a render target texture
//

/// <summary>Matrix that transforms the water surface into world coordinates</summary>
float4x4 World;
/// <summary>Matrix that transforms world coordinates into view space</summary>
float4x4 View;
/// <summary>Matrix that transforms view space coordinates into screen coordinates</summary>
float4x4 Projection;
/// <summary>Inverse view matrix for untransforming projective texture coordinates</summary>
float4x4 ReflectionView;

/// <summary>Projective texture containing the water reflection image</summary>
texture ReflectionTexture;
/// <summary>Detail texture for the water surface</summary>
texture WaterTexture;

// --------------------------------------------------------------------------------------------- //
// Texture Samplers
// --------------------------------------------------------------------------------------------- //

/// <summary>Sampler for the projective reflection texture</summary>
sampler2D ReflectionSampler = sampler_state {
  Texture = (ReflectionTexture);
  AddressU = Mirror;
  AddressV = Mirror;
  MinFilter = Linear;
  MagFilter = Linear;
};

/// <summary>Sampler for the water detail texture</summary>
sampler2D WaterSampler = sampler_state {
  Texture = (WaterTexture);
  AddressU = Wrap;
  AddressV = Wrap;
  MinFilter = Linear;
  MagFilter = Linear;
};

// --------------------------------------------------------------------------------------------- //
// Supporting Structures
// --------------------------------------------------------------------------------------------- //

/// <summary>Contains the inputs to the vertex shader</summary>
struct VertexShaderInput {
  /// <summary>Position of the vertex in world coordinates</summary>
  float4 Position : POSITION0;
  /// <summary>Texture coordinates at the vertex</summary>
  float2 TextureCoordinates : TEXCOORD0;
};

/// <summary>Outputs generated by the vertex shader</summary>
struct VertexShaderOutput {
  /// <summary>Position in screen coordinates</summary>
  float4 Position : POSITION0;
  /// <summary>Texture coordinates at the vertex for the water texture</summary>
  float2 WaterTextureCoordinates : TEXCOORD0;
  /// <summary>Texture coordinates at the vertex for the reflection texture</summary>
  float4 ReflectionTextureCoordinates : TEXCOORD1;
};

// --------------------------------------------------------------------------------------------- //
// Vertex Shader
// --------------------------------------------------------------------------------------------- //

/// <summary>Transforms a vertex into view space</summary>
/// <param name="input">Vertex fields the vertex shader can access</param>
/// <returns>The transformed vertex</returns>
VertexShaderOutput VertexShaderFunction(VertexShaderInput input) {
  VertexShaderOutput output;

  // Transform the vertex position from world into view space
  float4 worldPosition = mul(input.Position, World);
  float4 viewPosition = mul(worldPosition, View);
  output.Position = mul(viewPosition, Projection);

  // The texture coordinates don't need any special processing
  output.WaterTextureCoordinates = input.TextureCoordinates;

  // Unproject the vertex position so it will generate texture coordinates
  // in screen space for the pixel shader
  worldPosition = mul(input.Position, World);
  viewPosition = mul(worldPosition, ReflectionView);
  output.ReflectionTextureCoordinates = mul(viewPosition, Projection);
  
  return output;
}

// --------------------------------------------------------------------------------------------- //
// Pixel Shader
// --------------------------------------------------------------------------------------------- //

/// <summary>Calculates the color of a pixel</summary>
/// <param name="input">Interpolated output of the vertex shader</param>
/// <returns>The calculated color of the pixel</returns>
float4 PixelShaderFunction(VertexShaderOutput input) : COLOR0 {
  float2 projectedTextureCoordinates;
  
  projectedTextureCoordinates.x =
    (input.ReflectionTextureCoordinates.x / input.ReflectionTextureCoordinates.w) * 0.5f + 0.5f;

  projectedTextureCoordinates.y =
    (input.ReflectionTextureCoordinates.y / input.ReflectionTextureCoordinates.w) * -0.5f + 0.5f;

  return
    tex2D(ReflectionSampler, projectedTextureCoordinates) * 0.5 +
    tex2D(WaterSampler, input.WaterTextureCoordinates) * 0.5;
}

// --------------------------------------------------------------------------------------------- //
// Technique
// --------------------------------------------------------------------------------------------- //

technique WaterTechnique {
  pass NormalPass {
    ZEnable = true;
    ZWriteEnable = false;
    StencilEnable = false;
    CullMode = CCW;

    AlphaBlendEnable = true;
    SrcBlend = SrcAlpha;
    DestBlend = InvSrcAlpha;

    VertexShader = compile vs_2_0 VertexShaderFunction();
    PixelShader = compile ps_2_0 PixelShaderFunction();
  }
}
