

/******************************************
 * Auto-generated by CodeRocket
 * 04.02.2007 22:38:39
 ******************************************/
using System;
using System.Data;
using System.Xml.Serialization;
using WAM.BusinessLogic;

namespace WAM.Dao 
{    
    
	/// <summary>
	/// Base Categories
	/// </summary>
	[Serializable]
	public class Categories
{


        	
	
	 #region Properties
	 private Categories objectValue;
	 

              /// <summary>
        /// Gets or sets the CategoryID.
        /// </summary>
        /// <value>The CategoryID.</value>   
		[XmlElement(ElementName = "CategoryID")]
		public System.Int32 CategoryID 
		{
			get{return objectValue.CategoryID;}
			set{objectValue.CategoryID = value;}
		}			

              /// <summary>
        /// Gets or sets the CategoryName.
        /// </summary>
        /// <value>The CategoryName.</value>   
		[XmlElement(ElementName = "CategoryName")]
		public System.String CategoryName 
		{
			get{return objectValue.CategoryName;}
			set{objectValue.CategoryName = value;}
		}			

              /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        /// <value>The Description.</value>   
		[XmlElement(ElementName = "Description")]
		public System.String? Description 
		{
			get{return objectValue.Description;}
			set{objectValue.Description = value;}
		}			

              /// <summary>
        /// Gets or sets the Picture.
        /// </summary>
        /// <value>The Picture.</value>   
		[XmlElement(ElementName = "Picture")]
		public System.Byte[]? Picture 
		{
			get{return objectValue.Picture;}
			set{objectValue.Picture = value;}
		}			

        
        #endregion
        
          
        
        /// <summary>
        /// Copies the specified destination.
        /// </summary>
        /// <param name="destination">The destination.</param>
        protected override void Copy(object destination)
        {
            CategoriesBase<TPool> dest = destination as CategoriesBase<TPool>;
            
            dest._CategoryID = _CategoryID;
            dest._CategoryName = _CategoryName;
            dest._Description = _Description;
            dest._Picture = _Picture;
            
             base.Copy(destination);
        }	
        
        
        /// <summary>
        /// Validates this instance.
        /// </summary>
        public override void Validate()
        {
            if ( CategoryName.Length >15|| ( Description!= null && Description.Length >1073741823 ) )
                throw new ValidateException(ApplicationCore.SR.Errors.
Properties for: TableSchema
	Name(System.String): Categories
	Alias(System.String): Categories
	ProperName(System.String): Categories
	IsActive(System.Boolean): True
	TableType(DataSchema.TableType): TABLE
	Columns(DataSchema.Collections.ColumnSchemaDictionary): DataSchema.Collections.ColumnSchemaDictionary
	Item(DataSchema.ColumnSchema): 
	OrdinalColumns(System.Collections.SortedList): System.Collections.SortedList
	SortedColumns(System.Collections.SortedList): System.Collections.SortedList
	Procedures(DataSchema.Collections.ProcedureSchemaDictionary): 
	ProcedureCount(System.Int32): 0
	PrimaryKeys(DataSchema.Collections.PrimaryKeyColumnDictionary): 
	ForeignKeys(DataSchema.Collections.ForeignKeyDictionary): DataSchema.Collections.ForeignKeyDictionary
	PrimaryKeyCount(System.Int32): 0
	ForeignKeyCount(System.Int32): 0
	PrimaryKeyColumns(System.Collections.Generic.ICollection`1[DataSchema.ColumnSchema]): System.Collections.Generic.Dictionary`2+ValueCollection[System.String,DataSchema.ColumnSchema]
	HasForeignKeys(System.Boolean): False
	HasPrimaryKeys(System.Boolean): False

DataSchema.Collections.ColumnSchemaDictionary.CommonValidationError);
        }	
        
        
             
	    /// <summary>
	    /// Maps the IDataReader values to a Categories object
	    /// </summary>
	    /// <param name="reader">The IDataReader to map</param>
	    protected override void MapObject(IDataReader reader) 
	    {
	            int ordinal;
	
					ordinal = reader.GetOrdinal("CategoryID");
        if(!reader.IsDBNull(ordinal)) _CategoryID =((System.Int32)(reader.GetValue(ordinal)));
   	
					ordinal = reader.GetOrdinal("CategoryName");
        if(!reader.IsDBNull(ordinal)) _CategoryName =((System.String)(reader.GetValue(ordinal)));
   	
					ordinal = reader.GetOrdinal("Description");
        _Description = (!reader.IsDBNull(ordinal))?(System.String?)((System.String)(reader.GetValue(ordinal))): null;
   	
					ordinal = reader.GetOrdinal("Picture");
        _Picture = (!reader.IsDBNull(ordinal))?(System.Byte[]?)((System.Byte[])(reader.GetValue(ordinal))): null;
   		
            _ID = new IntIdentifier();
      }	
 
	}
}
