#set( $entity = "${table.Alias}" )
#set( $dao = "${entity}Dao" )
#set( $baseInteface = "I${entity}ForDao" )
#set( $identifier = "${entity}Identifier" )

#set($pkCallingArgumets="")
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($pkCallingArgumets="${pkCallingArgumets} ${column.MemberName},")			
#end
#end  
#set($pkCallingArgumets="${tools.CutString($pkCallingArgumets,1)}")

/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using System.Data;
using System.Xml.Serialization;
using ${namespace}.BusinessLogic;

namespace ${namespace}.Dao 
{    
    
	/// <summary>
	/// Base ${entity}
	/// </summary>
	[Serializable]
	public class ${entity}
{

#if($table.PrimaryKeyCount>1) 

	    /// <summary>
        /// $identifier
        /// </summary>
        public class $identifier : Int${table.PrimaryKeyCount}Identifier
        {
            #region Properties

#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)

            private ${column.NetType} ${column.MemberName}; 
            /// <summary>
            /// Gets the ${column.Alias}.
            /// </summary>
            /// <value>The ${column.Alias}.</value>
            public ${column.NetType} ${column.Alias}
            {
                get { return ${column.MemberName}; }
            }
            
#end
#end 
            #endregion

            /// <summary>
            /// Initializes a new instance of the <see cref="T:AnswerIdentifier"/> class.
            /// </summary>
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
            /// <param name="${column.Alias}">The ${column.Alias}.</param>
#end
#end      
#set($tmp="")
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($tmp="${tmp} ${column.NetType} ${column.Alias},")			
#end
#end  
            public $identifier(${tools.CutString($tmp,1)})
            {
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
                _${column.Alias} = ${column.Alias};
#end
#end              
            }


            /// <summary>
            /// Equalses the specified obj.
            /// </summary>
            /// <param name="identifier">The identifier.</param>
            /// <returns></returns>
            public bool Equals($identifier identifier)
            {
                if (identifier == null)
                    return false;

                return ${tools.CutString($tmp,2)};
            }
            
            /// <summary>
            /// Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            /// </summary>
            /// <returns>
            /// A hash code for the current <see cref="T:System.Object"></see>.
            /// </returns>
            public override int GetHashCode()
            {
                return HashCodeStrategy.GetHashCode($pkCallingArgumets);
            }
            
        }		
#end		

        	
	
	 #region Properties
	 private ${entity} objectValue;
	 

#foreach($column in $table.SortedColumns.Values)
#if ($column.IsActive)
   #if ($column.AllowNulls && $column.NetType!="String" )
     #set( $nullable = "?" ) 
   #else
     #set( $nullable = "" ) 
   #end
        /// <summary>
        /// Gets or sets the ${column.Alias}.
        /// </summary>
        /// <value>The ${column.Alias}.</value>   
		[XmlElement(ElementName = "${column.Alias}")]
		public ${column.NetType}${nullable} $column.Alias 
		{
			get{return objectValue.${column.ProperName};}
			set{objectValue.${column.ProperName} = value;}
		}			

#end
#end
        
        #endregion
        
          
        
        /// <summary>
        /// Copies the specified destination.
        /// </summary>
        /// <param name="destination">The destination.</param>
        protected override void Copy(object destination)
        {
            ${entity}Base<TPool> dest = destination as ${entity}Base<TPool>;
            
#foreach($column in $table.SortedColumns.Values)
#if ($column.IsActive)
            dest._${column.Alias} = _${column.Alias};
#end
#end      
            
             base.Copy(destination);
        }	
        
        
        /// <summary>
        /// Validates this instance.
        /// </summary>
        public override void Validate()
        {
#if(${table.GetDefaultValidator().Length} > 0)        
            if (${table.GetDefaultValidator})
                throw new ValidateException(ApplicationCore.SR.Errors.${table}.CommonValidationError);
#end                
        }	
        
        
 
 
	}
}
