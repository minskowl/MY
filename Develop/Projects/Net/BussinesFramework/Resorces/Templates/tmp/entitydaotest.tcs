#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}" )
#set( $dao = "${tableschema.Alias}Dao" )
#set( $baseInteface = "I${table}ForDao" )
/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using System.Collections.Generic;

using NUnit.Framework;

using ${namespace};
using ${namespace}.BusinessLogic;
using ${namespace}.Dao;
using ${namespace}.Tests;
using MarketResearch.Tests.Dao.Mock;

namespace ${namespace}.Tests.Dao
{

    [TestFixture]
    public class ${dao}Tests
    {
        ${dao} _dao = new ${dao}();


        #region SetUp/TearDown
        [TestFixtureSetUp]
        public void InitFixture()
        {
            helperTests.InitFull();
        }

        [SetUp]
        public void InitTest()
        {
            helperTests.ClearDatabase();
        }
        [TestFixtureTearDown]
        public void FixtureTearDown()
        {
            helperTests.Logoff();
        }
        #endregion
        
		public ${baseInteface} LightInsert()
        {
			return LightInsert("${entity}Name Test");
		}
        public ${baseInteface} LightInsert(string ${entity}Name)
        {
            int before = _dao.Count;

            Mock${entity} entity = new Mock${entity}();
			//entity.${entity}Name = ${entity}Name;
 
            _dao.Insert(entity);

            Assert.AreEqual(before + 1, _dao.Count);
            return entity;
        }
        
        #region Tests
        [Test,Ignore("")]
        public void InsertTest()
        {

            I${entity} entity=LightInsert();
            
            Assert.IsNotNull(entity);
 #set($tmp="")              
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
            Assert.Greater(entity.${column.Alias} ,0);
            #set($tmp="${tmp} entity.${column.Alias},")	
#end
#end          

            Assert.IsNotNull(_dao.SelectById(${tools.CutString($tmp,1)}));

        }
        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void InsertExceptionTest()
        {
            _dao.Insert(null);
        }
        
        [Test]
        [ExpectedException(typeof(ParentEntityNotExistsException))]
        public void InsertExceptionTest2()
        {
            Mock${entity} mock = new Mock${entity}();
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
			mock.${column.Alias} = 999;
#end
#end             
            _dao.Insert(mock);
        }  
                
 #set($tmp="")  
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($tmp="${tmp} inserted.${column.Alias},")	
#end
#end        
        [Test,Ignore("")]
        public void UpdateTest()
        {
            ${baseInteface} inserted= LightInsert();

            $baseInteface  entity = _dao.SelectById(${tools.CutString($tmp,1)});

            //entity.${entity}Name = "newValue";

            _dao.Update(entity);

            $baseInteface   en_upd = _dao.SelectById(${tools.CutString($tmp,1)});

            //Assert.AreEqual("newValue", en_upd.${entity}Name);
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void UpdateExceptionTest()
        {
            _dao.Update(null);
        }
        
        [Test,Ignore("")]
        public void SelectAllTest()
        {
            LightInsert("Entity1");
            LightInsert("Entity2");

            IList<$baseInteface> list = _dao.SelectAll();

			Assert.AreEqual(_dao.Count, list.Count);

            //Assert.AreEqual("Entity1", list[0].${entity}Name);
            //Assert.AreEqual("Entity2", list[1].${entity}Name);
        }
#set($tmp="")  
#set($tmp1="")  
#set($tmp2="")
#foreach($column in $tableschema.PrimaryKeyColumns)
	#set($tmp="${tmp} inserted1.${column.Alias},")	
    #set($tmp1="${tmp1} inserted2.${column.Alias},")	
    #set($tmp2="${tmp2} 99,")	
#end
        [Test]
        [ExpectedException(typeof(EntityNotExistsException))]
        public void SelectOneExceptionTest()
        {
            _dao.SelectById(${tools.CutString($tmp2,1)});
        }
        [Test,Ignore("")]
        public void SelectOneTest()
        {
            ${baseInteface} inserted1=LightInsert("Entity1");
            ${baseInteface} inserted2=LightInsert("Entity2");

            Assert.Greater( _dao.CountUndeleted,1);

            $baseInteface entity1 = _dao.SelectById(${tools.CutString($tmp,1)});
            $baseInteface entity2 = _dao.SelectById(${tools.CutString($tmp1,1)});

            //Assert.AreEqual("Entity1", entity1.${entity}Name);
            Assert.AreEqual(inserted1.key, entity1.key);
  

            //Assert.AreEqual("Entity2", entity2.${entity}Name);
            Assert.AreEqual(inserted2.key, entity2.key);
        }
        
        [Test,Ignore("")]
        public void DeleteOne()
        {
            $baseInteface entity = LightInsert();

            int CountUndeletedBefore = _dao.CountUndeleted;
            int CountDeletedBefore = _dao.CountDeleted;
            
            _dao.Delete(entity);
            
            Assert.AreEqual(CountDeletedBefore+1, _dao.CountDeleted);
            Assert.AreEqual(CountUndeletedBefore-1, _dao.CountUndeleted );

        }
        
        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void DeleteExceptionTest()
        {
            _dao.Delete(null);
        }
        
        [Test]
        public void CreateEntityTest()
        {
            ${dao}ForTest dao = new ${dao}ForTest();

            Assert.IsNotNull(dao.CreateEntityTest());
            Assert.IsInstanceOfType(typeof(${entity}), dao.CreateEntityTest());

        }
        #endregion
    }



    public class ${dao}ForTest : ${dao}
    {
        public ${baseInteface} CreateEntityTest()
        {
            return CreateEntity();
        }

        public IList<${baseInteface}> MapObjectsTest(System.Data.IDataReader reader)
        {
            return MapEntities(reader);
        }
    }

}