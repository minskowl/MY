#set( $dao = "${tableschema.Alias}Dao" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}" )
#set( $baseInteface = "I${table}ForDao" )
#set($quote='"')   
#set($idParams="")
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($idParams="${idParams} ${column.NetType} ${column.Alias},")
#end
#end      
#set($idParams=$tools.CutString($idParams,1))  

/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using System.Collections.Generic;

namespace ${namespace}.Dao 
{    
    /// <summary>
    /// I${dao}.
    /// </summary>
    public interface I${dao} : IDaoBase<${baseInteface}>
    {
        /// <summary>
        /// Selects the by id.
        /// </summary>
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	    /// <param name="${column.Alias}">The ${column.Alias}.</param>
#end
#end          
        /// <returns></returns>
        ${baseInteface} SelectById(${idParams});
      
    }



    /// <summary>
    /// Data Access Object for the $table table.
    /// </summary>
    /// <remarks>
    /// All generated functionality is part of the ${dao}Base class.  All
    /// custom implementations should be done in this class.
    /// </remarks>
    public abstract class Abstract${dao} : AbstractDao<${baseInteface}>, I${dao}       
    {
    
        /// <summary>
        /// Constructor
        /// </summary>
        protected Abstract${dao}() : base("${tableschema.Name}") { }

        #region Procedures
        /// <summary>
        /// Gets the select all procedure.
        /// </summary>
        /// <value>The select all procedure.</value>
        protected override string SelectAllProcedure
        { get { return "mrs_${table}SelectAll"; } }  
        
        /// <summary>
        /// Gets the select one procedure.
        /// </summary>
        /// <value>The select one procedure.</value>
       protected override string SelectOneProcedure
       { get { return "mrs_${table}SelectOne"; } }
       
        /// <summary>
        /// Gets the select one procedure.
        /// </summary>
        /// <value>The select one procedure.</value>
       protected override string DeleteOneProcedure
       { get { return "mrs_${table}DeleteOne"; } }
       
        /// <summary>
        /// Gets the insert procedure.
        /// </summary>
        /// <value>The insert procedure.</value>
        protected override string InsertProcedure
        { get { return "mrs_${table}Insert"; } }
        
        /// <summary>
        /// Gets the insert procedure.
        /// </summary>
        /// <value>The insert procedure.</value>
        protected override string UpdateProcedure
        { get { return "mrs_${table}Update"; } }
        
        #endregion
        
        #region Get Parameters 
        /// <summary>
        /// Gets the id parameters.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        protected override ParameterCollection GetIdParameters(${baseInteface} entity)
        {
             ParameterCollection cmdParams = new ParameterCollection();       
#foreach($column in $tableschema.PrimaryKeyColumns)
             cmdParams.AddInput("@i_n${column.Alias}", entity.${column.Alias});
#end          
            return cmdParams;
        }
        
        /// <summary>
        /// Gets the insert parameters.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        protected override ParameterCollection GetInsertParameters(${baseInteface} entity)
        {
            ParameterCollection cmdParams = new ParameterCollection();
#foreach($column in $tableschema.SortedColumns.Values)
#if ($column.IsActive && ! $column.IsAutoIncrement && $column.Alias!="UserId" && $column.Alias!="LastAction"   && $column.Alias!="ActionDate" )
#if($column.NetType=="String" || $column.NetType=="string" || $column.NetType=="System.String")
		cmdParams.AddInput("@i_s${column.Alias}", entity.${column.Alias});
#elseif($column.NetType=="DateTime" || $column.NetType=="System.DateTime")			
		cmdParams.AddInput("@i_dt${column.Alias}", entity.${column.Alias});
#else		
		cmdParams.AddInput("@i_n${column.Alias}", entity.${column.Alias});
#end			
#end
#end
            return cmdParams;
        }

        /// <summary>
        /// Gets the update parameters.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        protected override ParameterCollection GetUpdateParameters(${baseInteface} entity)
        {
            ParameterCollection cmdParams = new ParameterCollection();

#foreach($column in $tableschema.SortedColumns.Values)
#if ($column.IsActive && $column.Alias!="UserId" && $column.Alias!="LastAction"   && $column.Alias!="ActionDate"  )
#if($column.NetType=="String" || $column.NetType=="string" || $column.NetType=="System.String")
		cmdParams.AddInput("@i_s${column.Alias}", entity.${column.Alias});
#elseif($column.NetType=="DateTime" || $column.NetType=="System.DateTime")			
		cmdParams.AddInput("@i_dt${column.Alias}", entity.${column.Alias});
#else		
		cmdParams.AddInput("@i_n${column.Alias}", entity.${column.Alias});
#end
#end
#end

            return cmdParams;
        }
		#endregion
		
        #region Selects
      
#if($tableschema.PrimaryKeyCount>1)      
#set($tmp="")  
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($tmp="${tmp} $quote ${column.Alias}= $quote + ${column.Alias}.ToString() +")	
#end
#end      
        /// <summary>
        /// Creates the sql select command, using the passed in foreign key.  This will return an
        /// IList of all objects that have that foreign key.
        /// </summary>
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	    /// <param name="${column.Alias}">The ${column.Alias}.</param>
#end
#end  
        /// <returns>IDataReader</returns>
        public ${baseInteface} SelectById(${idParams})
        {
            ${baseInteface} res;
            try
            {
            ParameterCollection cmdParams = new ParameterCollection();
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
			cmdParams.AddInput("@i_n${column.Alias}", ${column.Alias});
#end
#end            
                res = SelectBy( "mrs_${table}SelectOne", cmdParams));
            }
            catch (EntityNotExistsException ex)
            {
                ex.Id =${tools.CutString($tmp,1)};
                throw ex;
            }
            return res;
            
        }
#else
        /// <summary>
        /// Creates the sql select command, using the passed in foreign key.  This will return an
        /// IList of all objects that have that foreign key.
        /// </summary>
	    /// <param name="id">The id.</param>
        /// <returns>IDataReader</returns>
        public ${baseInteface} SelectById(int id)
        {
            ${baseInteface} res;
            try
            {
                res = SelectBy( SelectOneProcedure, "@i_n${table}Id", id);
            }
            catch (EntityNotExistsException ex)
            {
                ex.Id ="id = " + id.ToString();
                throw ex;
            }
            return res;
            
        }
#end
        
        #endregion
        
#foreach($prc in $tableschema.Procedures.Values)
//public void $prc.Name()
//{

//}
#end        
    
    }
}