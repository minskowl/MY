#set( $dao = "${tableschema.Alias}Dao" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}" )
#set( $baseInteface = "I${table}ForDao" )
/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using System.Collections.Generic;

namespace ${namespace}.BusinessLogic
{
    /// <summary>
    /// $entity Collection.
    /// </summary>
    public class ${entity}Collection : AbstractPoolEntitiesCollection<I${entity}, ${entity}Pool>, I${entity}Collection
    {
        public ${entity}Collection(${entity}Pool pool) : base(pool)
        {        }
        
         #region Properties
        /// <summary>
        /// Gets a value indicating whether this instance is read only.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
        /// </value>
        protected override bool IsReadOnly
        {
            get { return false; }
        }

        /// <summary>
        /// Gets a value indicating whether this instance is fixed size.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is fixed size; otherwise, <c>false</c>.
        /// </value>
        protected override bool IsFixedSize
        {
            get { return false; }
        }
                
         #endregion
         
         #region  Methods
         
#if($tableschema.PrimaryKeyCount==1)   
        /// <summary>
        /// Gets the by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        public I${entity} GetById(int id)
        {
            return _pool.GetById(id);
        }
#else
        /// <summary>
        /// Gets the by ids.
        /// </summary>
#set($tmp="")
#set($tmp1="")
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($tmp="${tmp} ${column.NetType} ${column.Alias},")	
	#set($tmp1="${tmp1} ${column.Alias},")	
        /// <param name="${column.Alias}">The ${column.Alias}.</param>		
#end
#end  
        /// <returns></returns>
        public I${entity} GetById(${tools.CutString($tmp,1)})
        {
            return _pool.GetById(${tools.CutString($tmp1,1)});
        }          
#end

        /// <summary>
        /// Load entities to storage
        /// </summary>
        protected override List<I${entity}> GetCollectionEntities()
        {
            return _pool.GetAll();
        }

        /// <summary>
        /// Determines whether this instance can add the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>
        /// 	<c>true</c> if this instance can add the specified entity; otherwise, <c>false</c>.
        /// </returns>
        //protected override bool CanAdd(I${entity} entity)
        //{
        //    return true;
        //}

        /// <summary>
        /// Determines whether this instance can remove the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>
        /// 	<c>true</c> if this instance can remove the specified entity; otherwise, <c>false</c>.
        /// </returns>
        //protected override bool CanRemove(I${entity} entity)
        //{
        //    return true;
        //}
        
        #endregion        
    }
}
