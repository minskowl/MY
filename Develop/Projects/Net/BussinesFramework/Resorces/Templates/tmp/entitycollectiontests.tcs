#set( $dao = "${tableschema.Alias}Dao" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}" )
#set( $baseInteface = "I${table}ForDao" )
/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using MarketResearch.BusinessLogic;
using MarketResearch.Dao;

using NUnit.Framework;
using MarketResearch.Tests.Dao;

namespace MarketResearch.Tests.BusinessLogic.DbTests
{
    [TestFixture]
    public class ${entity}CollectionTests
    {
        private ${entity}Collection col;
        private ${entity}Pool pool;
        private ${dao} dao = new ${dao}();
        private ${dao}Tests ${dao}Tests = new ${dao}Tests();
        //private IFormForDao parentEntity;
        
        #region SetUp/TearDown

        [TestFixtureSetUp]
        public void InitFixture()
        {
           helperTests.InitFull();  
            pool = new ${entity}Pool(dao);
        }

        [SetUp]
        public void InitTest()
        {
            pool.Clear();
            helperTests.ClearFull();
            //parentEntity= new FormDaoTests().LightInsert();
             col = new ${entity}Collection( pool);//      form.FormId,
        }

        [TestFixtureTearDown]
        public void FixtureTearDown()
        {
            helperTests.Logoff();
        }
        #endregion

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void AddException()
        {
            col.Add(null);
        }
        [Test]
        public void IsReadOnlyTest()
        {
            Assert.IsFalse((col as IEntitiesCollection<I${entity}>).IsReadOnly);
        }
        [Test]
        public void IsFixedSizeTest()
        {
            Assert.IsFalse((col as IEntitiesCollection<I${entity}>).IsFixedSize);
        }
        
#set($tmp1="")
#set($tmp2="")
#set($tmp3="")
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($tmp1="${tmp1} inserted1.${column.Alias},")	
	#set($tmp2="${tmp2} inserted2.${column.Alias},")	
	#set($tmp3="${tmp3} inserted3.${column.Alias},")	
#end
#end 
        [Test, Ignore()]
        public void GetByIdAndReloadTest()
        {
            //Assert.AreEqual(0, col.Count);
            //I${entity} inserted1 = ${dao}Tests.LightInsert(parentEntity.,"test1");
            //I${entity} inserted2 = ${dao}Tests.LightInsert(parentEntity.,"test2");
            //I${entity} inserted3 = ${dao}Tests.LightInsert(parentEntity.,"test3");
            //Assert.AreEqual(3, dao.CountUndeleted);
            //Assert.AreEqual(0, col.Count);
            //col.Reload();
            //Assert.AreEqual(3, col.Count);

            //I${entity} read1 = col.GetById(${tools.CutString($tmp1,1)});
            //Assert.AreEqual(read1.GetHashCode(), inserted1.GetHashCode());

            //I${entity} read2 = col.GetById(${tools.CutString($tmp2,1)});
            //Assert.AreEqual(read2.GetHashCode(), inserted2.GetHashCode());

            //I${entity} read3 = col.GetById(${tools.CutString($tmp3,1)});
            //Assert.AreEqual(read3.GetHashCode(), inserted3.GetHashCode());
        }


    }
}
