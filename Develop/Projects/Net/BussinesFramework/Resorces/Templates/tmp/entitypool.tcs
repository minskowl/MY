#set( $dao = "${tableschema.Alias}Dao" )
#set( $table = "${tableschema.Alias}" )
#set( $entity = "${tableschema.Alias}" )
#set( $baseInteface = "I${table}ForDao" )
/******************************************
 * Auto-generated by CodeRocket
 * $datetimenow
 ******************************************/
using System;
using ${namespace}.Dao;

namespace ${namespace}.BusinessLogic
{

    /// <summary>
    /// Pool of $entity
    /// </summary>
    public class ${entity}Pool : AbstractDaoPool<${baseInteface},I${entity},I${dao}>, IPool<I${entity}>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="T:${entity}Pool"/> class.
        /// </summary>
        public ${entity}Pool() : base(new ${entity}Dao())
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="T:${entity}Pool"/> class.
        /// </summary>
        /// <param name="dao">The DAO.</param>
        public ${entity}Pool(I${entity}Dao dao) : base(dao)
        {  }

#if($tableschema.PrimaryKeyCount==1)   
        /// <summary>
        /// Gets the by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        public I${entity} GetById(int id)
        {
            return GetEntity(Dao.SelectById(id));
        }
#else
        /// <summary>
        /// Gets the by ids.
        /// </summary>
#set($tmp="")
#set($tmp1="")
#foreach($column in $tableschema.PrimaryKeyColumns)
#if ($column.IsActive)
	#set($tmp="${tmp} ${column.NetType} ${column.Alias},")	
	#set($tmp1="${tmp1} ${column.Alias},")	
        /// <param name="${column.Alias}">The ${column.Alias}.</param>		
#end
#end  
        /// <returns></returns>
        public I${entity} GetById(${tools.CutString($tmp,1)})
        {
            return GetEntity(Dao.SelectById(${tools.CutString($tmp1,1)}));
        }          
#end  
    }
}