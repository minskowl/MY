#set( $entity = "${table.Alias}" )
#set( $dao = "${entity}Dao" )
#set( $baseInteface = "I${entity}ForDao" )
#set( $identifier = "${entity}Identifier" )

#set($pkCallingArgumets="")
#foreach($column in $table.PrimaryKeyColumns)
#if ($column.IsActive)
#set($pkCallingArgumets="${pkCallingArgumets} ${column.MemberName},")
#end
#end
#set($pkCallingArgumets="${tools.CutString($pkCallingArgumets,1)}")

/******************************************
* Auto-generated by CodeRocket
* $datetimenow
******************************************/
using System;
using System.Data;
using System.Xml.Serialization;
using ${namespace}.BusinessLogic;

namespace ${namespace}.Dao
{

/// <summary>
  /// Base ${entity}
  ///
</summary>
public class ${entity}Factory
{

#foreach($column in $table.ActiveColumns)
int odrinal${column.Name};
#end


private void InitOrdinals(IDataReader reader)
{
#foreach($column in $table.ActiveColumns)
  odrinal${column.Name}= reader.GetOrdinal("${column.Name}");
#end
}
/// <summary>
/// Maps the IDataReader values to a $entity object
///
</summary>
/// <param name="reader">The IDataReader to map</param>
protected override ${entity}Value MapObject(IDataReader reader)
{
   ${entity}Value result=new ${entity}Value();
   InitOrdinals(reader);
   
#foreach($column in $table.ActiveColumns)


#if ($column.AllowNulls && $column.NetType!="String")
${column.MemberName} = (!reader.IsDBNull(ordinal))?(${column.NetType}?)((${column.NetType})(reader.GetValue(ordinal))): null;
#else
if(!reader.IsDBNull(odrinal${column.Name})) 
    result.${column.ProperName} =((${column.NetType})(reader.GetValue( odrinal${column.Name})));
#end

#end
  return result;
}
}
}